// Generated by jextract

package org.vybe.raylib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rlRenderBatch {
 *     int bufferCount;
 *     int currentBuffer;
 *     rlVertexBuffer *vertexBuffer;
 *     rlDrawCall *draws;
 *     int drawCounter;
 *     float currentDepth;
 * }
 * }
 */
public class rlRenderBatch {

    rlRenderBatch() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        raylib.C_INT.withName("bufferCount"),
        raylib.C_INT.withName("currentBuffer"),
        raylib.C_POINTER.withName("vertexBuffer"),
        raylib.C_POINTER.withName("draws"),
        raylib.C_INT.withName("drawCounter"),
        raylib.C_FLOAT.withName("currentDepth")
    ).withName("rlRenderBatch");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt bufferCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bufferCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bufferCount
     * }
     */
    public static final OfInt bufferCount$layout() {
        return bufferCount$LAYOUT;
    }

    private static final long bufferCount$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bufferCount
     * }
     */
    public static final long bufferCount$offset() {
        return bufferCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bufferCount
     * }
     */
    public static int bufferCount(MemorySegment struct) {
        return struct.get(bufferCount$LAYOUT, bufferCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bufferCount
     * }
     */
    public static void bufferCount(MemorySegment struct, int fieldValue) {
        struct.set(bufferCount$LAYOUT, bufferCount$OFFSET, fieldValue);
    }

    private static final OfInt currentBuffer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("currentBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int currentBuffer
     * }
     */
    public static final OfInt currentBuffer$layout() {
        return currentBuffer$LAYOUT;
    }

    private static final long currentBuffer$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int currentBuffer
     * }
     */
    public static final long currentBuffer$offset() {
        return currentBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int currentBuffer
     * }
     */
    public static int currentBuffer(MemorySegment struct) {
        return struct.get(currentBuffer$LAYOUT, currentBuffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int currentBuffer
     * }
     */
    public static void currentBuffer(MemorySegment struct, int fieldValue) {
        struct.set(currentBuffer$LAYOUT, currentBuffer$OFFSET, fieldValue);
    }

    private static final AddressLayout vertexBuffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vertexBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rlVertexBuffer *vertexBuffer
     * }
     */
    public static final AddressLayout vertexBuffer$layout() {
        return vertexBuffer$LAYOUT;
    }

    private static final long vertexBuffer$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rlVertexBuffer *vertexBuffer
     * }
     */
    public static final long vertexBuffer$offset() {
        return vertexBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rlVertexBuffer *vertexBuffer
     * }
     */
    public static MemorySegment vertexBuffer(MemorySegment struct) {
        return struct.get(vertexBuffer$LAYOUT, vertexBuffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rlVertexBuffer *vertexBuffer
     * }
     */
    public static void vertexBuffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vertexBuffer$LAYOUT, vertexBuffer$OFFSET, fieldValue);
    }

    private static final AddressLayout draws$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("draws"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rlDrawCall *draws
     * }
     */
    public static final AddressLayout draws$layout() {
        return draws$LAYOUT;
    }

    private static final long draws$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rlDrawCall *draws
     * }
     */
    public static final long draws$offset() {
        return draws$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rlDrawCall *draws
     * }
     */
    public static MemorySegment draws(MemorySegment struct) {
        return struct.get(draws$LAYOUT, draws$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rlDrawCall *draws
     * }
     */
    public static void draws(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(draws$LAYOUT, draws$OFFSET, fieldValue);
    }

    private static final OfInt drawCounter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("drawCounter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int drawCounter
     * }
     */
    public static final OfInt drawCounter$layout() {
        return drawCounter$LAYOUT;
    }

    private static final long drawCounter$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int drawCounter
     * }
     */
    public static final long drawCounter$offset() {
        return drawCounter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int drawCounter
     * }
     */
    public static int drawCounter(MemorySegment struct) {
        return struct.get(drawCounter$LAYOUT, drawCounter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int drawCounter
     * }
     */
    public static void drawCounter(MemorySegment struct, int fieldValue) {
        struct.set(drawCounter$LAYOUT, drawCounter$OFFSET, fieldValue);
    }

    private static final OfFloat currentDepth$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("currentDepth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float currentDepth
     * }
     */
    public static final OfFloat currentDepth$layout() {
        return currentDepth$LAYOUT;
    }

    private static final long currentDepth$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float currentDepth
     * }
     */
    public static final long currentDepth$offset() {
        return currentDepth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float currentDepth
     * }
     */
    public static float currentDepth(MemorySegment struct) {
        return struct.get(currentDepth$LAYOUT, currentDepth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float currentDepth
     * }
     */
    public static void currentDepth(MemorySegment struct, float fieldValue) {
        struct.set(currentDepth$LAYOUT, currentDepth$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

