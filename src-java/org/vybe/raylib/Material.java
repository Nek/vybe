// Generated by jextract

package org.vybe.raylib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Material {
 *     Shader shader;
 *     MaterialMap *maps;
 *     float params[4];
 * }
 * }
 */
public class Material {

    Material() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Shader.layout().withName("shader"),
        raylib.C_POINTER.withName("maps"),
        MemoryLayout.sequenceLayout(4, raylib.C_FLOAT).withName("params")
    ).withName("Material");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout shader$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("shader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Shader shader
     * }
     */
    public static final GroupLayout shader$layout() {
        return shader$LAYOUT;
    }

    private static final long shader$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Shader shader
     * }
     */
    public static final long shader$offset() {
        return shader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Shader shader
     * }
     */
    public static MemorySegment shader(MemorySegment struct) {
        return struct.asSlice(shader$OFFSET, shader$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Shader shader
     * }
     */
    public static void shader(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, shader$OFFSET, shader$LAYOUT.byteSize());
    }

    private static final AddressLayout maps$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("maps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MaterialMap *maps
     * }
     */
    public static final AddressLayout maps$layout() {
        return maps$LAYOUT;
    }

    private static final long maps$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MaterialMap *maps
     * }
     */
    public static final long maps$offset() {
        return maps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MaterialMap *maps
     * }
     */
    public static MemorySegment maps(MemorySegment struct) {
        return struct.get(maps$LAYOUT, maps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MaterialMap *maps
     * }
     */
    public static void maps(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(maps$LAYOUT, maps$OFFSET, fieldValue);
    }

    private static final SequenceLayout params$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float params[4]
     * }
     */
    public static final SequenceLayout params$layout() {
        return params$LAYOUT;
    }

    private static final long params$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float params[4]
     * }
     */
    public static final long params$offset() {
        return params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float params[4]
     * }
     */
    public static MemorySegment params(MemorySegment struct) {
        return struct.asSlice(params$OFFSET, params$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float params[4]
     * }
     */
    public static void params(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, params$OFFSET, params$LAYOUT.byteSize());
    }

    private static long[] params$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float params[4]
     * }
     */
    public static long[] params$dimensions() {
        return params$DIMS;
    }
    private static final VarHandle params$ELEM_HANDLE = params$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float params[4]
     * }
     */
    public static float params(MemorySegment struct, long index0) {
        return (float)params$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float params[4]
     * }
     */
    public static void params(MemorySegment struct, long index0, float fieldValue) {
        params$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

