// Generated by jextract

package org.vybe.raylib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ModelAnimation {
 *     int boneCount;
 *     int frameCount;
 *     BoneInfo *bones;
 *     Transform **framePoses;
 *     char name[32];
 * }
 * }
 */
public class ModelAnimation {

    ModelAnimation() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        raylib.C_INT.withName("boneCount"),
        raylib.C_INT.withName("frameCount"),
        raylib.C_POINTER.withName("bones"),
        raylib.C_POINTER.withName("framePoses"),
        MemoryLayout.sequenceLayout(32, raylib.C_CHAR).withName("name")
    ).withName("ModelAnimation");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt boneCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("boneCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int boneCount
     * }
     */
    public static final OfInt boneCount$layout() {
        return boneCount$LAYOUT;
    }

    private static final long boneCount$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int boneCount
     * }
     */
    public static final long boneCount$offset() {
        return boneCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int boneCount
     * }
     */
    public static int boneCount(MemorySegment struct) {
        return struct.get(boneCount$LAYOUT, boneCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int boneCount
     * }
     */
    public static void boneCount(MemorySegment struct, int fieldValue) {
        struct.set(boneCount$LAYOUT, boneCount$OFFSET, fieldValue);
    }

    private static final OfInt frameCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frameCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int frameCount
     * }
     */
    public static final OfInt frameCount$layout() {
        return frameCount$LAYOUT;
    }

    private static final long frameCount$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int frameCount
     * }
     */
    public static final long frameCount$offset() {
        return frameCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int frameCount
     * }
     */
    public static int frameCount(MemorySegment struct) {
        return struct.get(frameCount$LAYOUT, frameCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int frameCount
     * }
     */
    public static void frameCount(MemorySegment struct, int fieldValue) {
        struct.set(frameCount$LAYOUT, frameCount$OFFSET, fieldValue);
    }

    private static final AddressLayout bones$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("bones"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BoneInfo *bones
     * }
     */
    public static final AddressLayout bones$layout() {
        return bones$LAYOUT;
    }

    private static final long bones$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BoneInfo *bones
     * }
     */
    public static final long bones$offset() {
        return bones$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BoneInfo *bones
     * }
     */
    public static MemorySegment bones(MemorySegment struct) {
        return struct.get(bones$LAYOUT, bones$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BoneInfo *bones
     * }
     */
    public static void bones(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(bones$LAYOUT, bones$OFFSET, fieldValue);
    }

    private static final AddressLayout framePoses$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("framePoses"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Transform **framePoses
     * }
     */
    public static final AddressLayout framePoses$layout() {
        return framePoses$LAYOUT;
    }

    private static final long framePoses$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Transform **framePoses
     * }
     */
    public static final long framePoses$offset() {
        return framePoses$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Transform **framePoses
     * }
     */
    public static MemorySegment framePoses(MemorySegment struct) {
        return struct.get(framePoses$LAYOUT, framePoses$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Transform **framePoses
     * }
     */
    public static void framePoses(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(framePoses$LAYOUT, framePoses$OFFSET, fieldValue);
    }

    private static final SequenceLayout name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static final SequenceLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.asSlice(name$OFFSET, name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, name$OFFSET, name$LAYOUT.byteSize());
    }

    private static long[] name$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static long[] name$dimensions() {
        return name$DIMS;
    }
    private static final VarHandle name$ELEM_HANDLE = name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static byte name(MemorySegment struct, long index0) {
        return (byte)name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static void name(MemorySegment struct, long index0, byte fieldValue) {
        name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

