// Generated by jextract

package org.vybe.raylib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Mesh {
 *     int vertexCount;
 *     int triangleCount;
 *     float *vertices;
 *     float *texcoords;
 *     float *texcoords2;
 *     float *normals;
 *     float *tangents;
 *     unsigned char *colors;
 *     unsigned short *indices;
 *     float *animVertices;
 *     float *animNormals;
 *     unsigned char *boneIds;
 *     float *boneWeights;
 *     unsigned int vaoId;
 *     unsigned int *vboId;
 * }
 * }
 */
public class Mesh {

    Mesh() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        raylib.C_INT.withName("vertexCount"),
        raylib.C_INT.withName("triangleCount"),
        raylib.C_POINTER.withName("vertices"),
        raylib.C_POINTER.withName("texcoords"),
        raylib.C_POINTER.withName("texcoords2"),
        raylib.C_POINTER.withName("normals"),
        raylib.C_POINTER.withName("tangents"),
        raylib.C_POINTER.withName("colors"),
        raylib.C_POINTER.withName("indices"),
        raylib.C_POINTER.withName("animVertices"),
        raylib.C_POINTER.withName("animNormals"),
        raylib.C_POINTER.withName("boneIds"),
        raylib.C_POINTER.withName("boneWeights"),
        raylib.C_INT.withName("vaoId"),
        MemoryLayout.paddingLayout(4),
        raylib.C_POINTER.withName("vboId")
    ).withName("Mesh");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt vertexCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vertexCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int vertexCount
     * }
     */
    public static final OfInt vertexCount$layout() {
        return vertexCount$LAYOUT;
    }

    private static final long vertexCount$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int vertexCount
     * }
     */
    public static final long vertexCount$offset() {
        return vertexCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int vertexCount
     * }
     */
    public static int vertexCount(MemorySegment struct) {
        return struct.get(vertexCount$LAYOUT, vertexCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int vertexCount
     * }
     */
    public static void vertexCount(MemorySegment struct, int fieldValue) {
        struct.set(vertexCount$LAYOUT, vertexCount$OFFSET, fieldValue);
    }

    private static final OfInt triangleCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("triangleCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int triangleCount
     * }
     */
    public static final OfInt triangleCount$layout() {
        return triangleCount$LAYOUT;
    }

    private static final long triangleCount$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int triangleCount
     * }
     */
    public static final long triangleCount$offset() {
        return triangleCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int triangleCount
     * }
     */
    public static int triangleCount(MemorySegment struct) {
        return struct.get(triangleCount$LAYOUT, triangleCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int triangleCount
     * }
     */
    public static void triangleCount(MemorySegment struct, int fieldValue) {
        struct.set(triangleCount$LAYOUT, triangleCount$OFFSET, fieldValue);
    }

    private static final AddressLayout vertices$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vertices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *vertices
     * }
     */
    public static final AddressLayout vertices$layout() {
        return vertices$LAYOUT;
    }

    private static final long vertices$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *vertices
     * }
     */
    public static final long vertices$offset() {
        return vertices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *vertices
     * }
     */
    public static MemorySegment vertices(MemorySegment struct) {
        return struct.get(vertices$LAYOUT, vertices$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *vertices
     * }
     */
    public static void vertices(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vertices$LAYOUT, vertices$OFFSET, fieldValue);
    }

    private static final AddressLayout texcoords$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("texcoords"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *texcoords
     * }
     */
    public static final AddressLayout texcoords$layout() {
        return texcoords$LAYOUT;
    }

    private static final long texcoords$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *texcoords
     * }
     */
    public static final long texcoords$offset() {
        return texcoords$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *texcoords
     * }
     */
    public static MemorySegment texcoords(MemorySegment struct) {
        return struct.get(texcoords$LAYOUT, texcoords$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *texcoords
     * }
     */
    public static void texcoords(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(texcoords$LAYOUT, texcoords$OFFSET, fieldValue);
    }

    private static final AddressLayout texcoords2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("texcoords2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *texcoords2
     * }
     */
    public static final AddressLayout texcoords2$layout() {
        return texcoords2$LAYOUT;
    }

    private static final long texcoords2$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *texcoords2
     * }
     */
    public static final long texcoords2$offset() {
        return texcoords2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *texcoords2
     * }
     */
    public static MemorySegment texcoords2(MemorySegment struct) {
        return struct.get(texcoords2$LAYOUT, texcoords2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *texcoords2
     * }
     */
    public static void texcoords2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(texcoords2$LAYOUT, texcoords2$OFFSET, fieldValue);
    }

    private static final AddressLayout normals$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("normals"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *normals
     * }
     */
    public static final AddressLayout normals$layout() {
        return normals$LAYOUT;
    }

    private static final long normals$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *normals
     * }
     */
    public static final long normals$offset() {
        return normals$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *normals
     * }
     */
    public static MemorySegment normals(MemorySegment struct) {
        return struct.get(normals$LAYOUT, normals$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *normals
     * }
     */
    public static void normals(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(normals$LAYOUT, normals$OFFSET, fieldValue);
    }

    private static final AddressLayout tangents$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tangents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *tangents
     * }
     */
    public static final AddressLayout tangents$layout() {
        return tangents$LAYOUT;
    }

    private static final long tangents$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *tangents
     * }
     */
    public static final long tangents$offset() {
        return tangents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *tangents
     * }
     */
    public static MemorySegment tangents(MemorySegment struct) {
        return struct.get(tangents$LAYOUT, tangents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *tangents
     * }
     */
    public static void tangents(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tangents$LAYOUT, tangents$OFFSET, fieldValue);
    }

    private static final AddressLayout colors$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("colors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char *colors
     * }
     */
    public static final AddressLayout colors$layout() {
        return colors$LAYOUT;
    }

    private static final long colors$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char *colors
     * }
     */
    public static final long colors$offset() {
        return colors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char *colors
     * }
     */
    public static MemorySegment colors(MemorySegment struct) {
        return struct.get(colors$LAYOUT, colors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char *colors
     * }
     */
    public static void colors(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(colors$LAYOUT, colors$OFFSET, fieldValue);
    }

    private static final AddressLayout indices$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("indices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short *indices
     * }
     */
    public static final AddressLayout indices$layout() {
        return indices$LAYOUT;
    }

    private static final long indices$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short *indices
     * }
     */
    public static final long indices$offset() {
        return indices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short *indices
     * }
     */
    public static MemorySegment indices(MemorySegment struct) {
        return struct.get(indices$LAYOUT, indices$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short *indices
     * }
     */
    public static void indices(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(indices$LAYOUT, indices$OFFSET, fieldValue);
    }

    private static final AddressLayout animVertices$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("animVertices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *animVertices
     * }
     */
    public static final AddressLayout animVertices$layout() {
        return animVertices$LAYOUT;
    }

    private static final long animVertices$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *animVertices
     * }
     */
    public static final long animVertices$offset() {
        return animVertices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *animVertices
     * }
     */
    public static MemorySegment animVertices(MemorySegment struct) {
        return struct.get(animVertices$LAYOUT, animVertices$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *animVertices
     * }
     */
    public static void animVertices(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(animVertices$LAYOUT, animVertices$OFFSET, fieldValue);
    }

    private static final AddressLayout animNormals$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("animNormals"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *animNormals
     * }
     */
    public static final AddressLayout animNormals$layout() {
        return animNormals$LAYOUT;
    }

    private static final long animNormals$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *animNormals
     * }
     */
    public static final long animNormals$offset() {
        return animNormals$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *animNormals
     * }
     */
    public static MemorySegment animNormals(MemorySegment struct) {
        return struct.get(animNormals$LAYOUT, animNormals$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *animNormals
     * }
     */
    public static void animNormals(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(animNormals$LAYOUT, animNormals$OFFSET, fieldValue);
    }

    private static final AddressLayout boneIds$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("boneIds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char *boneIds
     * }
     */
    public static final AddressLayout boneIds$layout() {
        return boneIds$LAYOUT;
    }

    private static final long boneIds$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char *boneIds
     * }
     */
    public static final long boneIds$offset() {
        return boneIds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char *boneIds
     * }
     */
    public static MemorySegment boneIds(MemorySegment struct) {
        return struct.get(boneIds$LAYOUT, boneIds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char *boneIds
     * }
     */
    public static void boneIds(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(boneIds$LAYOUT, boneIds$OFFSET, fieldValue);
    }

    private static final AddressLayout boneWeights$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("boneWeights"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *boneWeights
     * }
     */
    public static final AddressLayout boneWeights$layout() {
        return boneWeights$LAYOUT;
    }

    private static final long boneWeights$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *boneWeights
     * }
     */
    public static final long boneWeights$offset() {
        return boneWeights$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *boneWeights
     * }
     */
    public static MemorySegment boneWeights(MemorySegment struct) {
        return struct.get(boneWeights$LAYOUT, boneWeights$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *boneWeights
     * }
     */
    public static void boneWeights(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(boneWeights$LAYOUT, boneWeights$OFFSET, fieldValue);
    }

    private static final OfInt vaoId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vaoId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int vaoId
     * }
     */
    public static final OfInt vaoId$layout() {
        return vaoId$LAYOUT;
    }

    private static final long vaoId$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int vaoId
     * }
     */
    public static final long vaoId$offset() {
        return vaoId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int vaoId
     * }
     */
    public static int vaoId(MemorySegment struct) {
        return struct.get(vaoId$LAYOUT, vaoId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int vaoId
     * }
     */
    public static void vaoId(MemorySegment struct, int fieldValue) {
        struct.set(vaoId$LAYOUT, vaoId$OFFSET, fieldValue);
    }

    private static final AddressLayout vboId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vboId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *vboId
     * }
     */
    public static final AddressLayout vboId$layout() {
        return vboId$LAYOUT;
    }

    private static final long vboId$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *vboId
     * }
     */
    public static final long vboId$offset() {
        return vboId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *vboId
     * }
     */
    public static MemorySegment vboId(MemorySegment struct) {
        return struct.get(vboId$LAYOUT, vboId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *vboId
     * }
     */
    public static void vboId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vboId$LAYOUT, vboId$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

