// Generated by jextract

package org.vybe.raylib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Model {
 *     Matrix transform;
 *     int meshCount;
 *     int materialCount;
 *     Mesh *meshes;
 *     Material *materials;
 *     int *meshMaterial;
 *     int boneCount;
 *     BoneInfo *bones;
 *     Transform *bindPose;
 * }
 * }
 */
public class Model {

    Model() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Matrix.layout().withName("transform"),
        raylib.C_INT.withName("meshCount"),
        raylib.C_INT.withName("materialCount"),
        raylib.C_POINTER.withName("meshes"),
        raylib.C_POINTER.withName("materials"),
        raylib.C_POINTER.withName("meshMaterial"),
        raylib.C_INT.withName("boneCount"),
        MemoryLayout.paddingLayout(4),
        raylib.C_POINTER.withName("bones"),
        raylib.C_POINTER.withName("bindPose")
    ).withName("Model");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout transform$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("transform"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Matrix transform
     * }
     */
    public static final GroupLayout transform$layout() {
        return transform$LAYOUT;
    }

    private static final long transform$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Matrix transform
     * }
     */
    public static final long transform$offset() {
        return transform$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Matrix transform
     * }
     */
    public static MemorySegment transform(MemorySegment struct) {
        return struct.asSlice(transform$OFFSET, transform$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Matrix transform
     * }
     */
    public static void transform(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, transform$OFFSET, transform$LAYOUT.byteSize());
    }

    private static final OfInt meshCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("meshCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int meshCount
     * }
     */
    public static final OfInt meshCount$layout() {
        return meshCount$LAYOUT;
    }

    private static final long meshCount$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int meshCount
     * }
     */
    public static final long meshCount$offset() {
        return meshCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int meshCount
     * }
     */
    public static int meshCount(MemorySegment struct) {
        return struct.get(meshCount$LAYOUT, meshCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int meshCount
     * }
     */
    public static void meshCount(MemorySegment struct, int fieldValue) {
        struct.set(meshCount$LAYOUT, meshCount$OFFSET, fieldValue);
    }

    private static final OfInt materialCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("materialCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int materialCount
     * }
     */
    public static final OfInt materialCount$layout() {
        return materialCount$LAYOUT;
    }

    private static final long materialCount$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int materialCount
     * }
     */
    public static final long materialCount$offset() {
        return materialCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int materialCount
     * }
     */
    public static int materialCount(MemorySegment struct) {
        return struct.get(materialCount$LAYOUT, materialCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int materialCount
     * }
     */
    public static void materialCount(MemorySegment struct, int fieldValue) {
        struct.set(materialCount$LAYOUT, materialCount$OFFSET, fieldValue);
    }

    private static final AddressLayout meshes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("meshes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Mesh *meshes
     * }
     */
    public static final AddressLayout meshes$layout() {
        return meshes$LAYOUT;
    }

    private static final long meshes$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Mesh *meshes
     * }
     */
    public static final long meshes$offset() {
        return meshes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Mesh *meshes
     * }
     */
    public static MemorySegment meshes(MemorySegment struct) {
        return struct.get(meshes$LAYOUT, meshes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Mesh *meshes
     * }
     */
    public static void meshes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(meshes$LAYOUT, meshes$OFFSET, fieldValue);
    }

    private static final AddressLayout materials$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("materials"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Material *materials
     * }
     */
    public static final AddressLayout materials$layout() {
        return materials$LAYOUT;
    }

    private static final long materials$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Material *materials
     * }
     */
    public static final long materials$offset() {
        return materials$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Material *materials
     * }
     */
    public static MemorySegment materials(MemorySegment struct) {
        return struct.get(materials$LAYOUT, materials$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Material *materials
     * }
     */
    public static void materials(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(materials$LAYOUT, materials$OFFSET, fieldValue);
    }

    private static final AddressLayout meshMaterial$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("meshMaterial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int *meshMaterial
     * }
     */
    public static final AddressLayout meshMaterial$layout() {
        return meshMaterial$LAYOUT;
    }

    private static final long meshMaterial$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int *meshMaterial
     * }
     */
    public static final long meshMaterial$offset() {
        return meshMaterial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int *meshMaterial
     * }
     */
    public static MemorySegment meshMaterial(MemorySegment struct) {
        return struct.get(meshMaterial$LAYOUT, meshMaterial$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int *meshMaterial
     * }
     */
    public static void meshMaterial(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(meshMaterial$LAYOUT, meshMaterial$OFFSET, fieldValue);
    }

    private static final OfInt boneCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("boneCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int boneCount
     * }
     */
    public static final OfInt boneCount$layout() {
        return boneCount$LAYOUT;
    }

    private static final long boneCount$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int boneCount
     * }
     */
    public static final long boneCount$offset() {
        return boneCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int boneCount
     * }
     */
    public static int boneCount(MemorySegment struct) {
        return struct.get(boneCount$LAYOUT, boneCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int boneCount
     * }
     */
    public static void boneCount(MemorySegment struct, int fieldValue) {
        struct.set(boneCount$LAYOUT, boneCount$OFFSET, fieldValue);
    }

    private static final AddressLayout bones$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("bones"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BoneInfo *bones
     * }
     */
    public static final AddressLayout bones$layout() {
        return bones$LAYOUT;
    }

    private static final long bones$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BoneInfo *bones
     * }
     */
    public static final long bones$offset() {
        return bones$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BoneInfo *bones
     * }
     */
    public static MemorySegment bones(MemorySegment struct) {
        return struct.get(bones$LAYOUT, bones$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BoneInfo *bones
     * }
     */
    public static void bones(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(bones$LAYOUT, bones$OFFSET, fieldValue);
    }

    private static final AddressLayout bindPose$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("bindPose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Transform *bindPose
     * }
     */
    public static final AddressLayout bindPose$layout() {
        return bindPose$LAYOUT;
    }

    private static final long bindPose$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Transform *bindPose
     * }
     */
    public static final long bindPose$offset() {
        return bindPose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Transform *bindPose
     * }
     */
    public static MemorySegment bindPose(MemorySegment struct) {
        return struct.get(bindPose$LAYOUT, bindPose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Transform *bindPose
     * }
     */
    public static void bindPose(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(bindPose$LAYOUT, bindPose$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

