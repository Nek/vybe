// Generated by jextract

package org.vybe.raylib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rlVertexBuffer {
 *     int elementCount;
 *     float *vertices;
 *     float *texcoords;
 *     float *normals;
 *     unsigned char *colors;
 *     unsigned int *indices;
 *     unsigned int vaoId;
 *     unsigned int vboId[5];
 * }
 * }
 */
public class rlVertexBuffer {

    rlVertexBuffer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        raylib.C_INT.withName("elementCount"),
        MemoryLayout.paddingLayout(4),
        raylib.C_POINTER.withName("vertices"),
        raylib.C_POINTER.withName("texcoords"),
        raylib.C_POINTER.withName("normals"),
        raylib.C_POINTER.withName("colors"),
        raylib.C_POINTER.withName("indices"),
        raylib.C_INT.withName("vaoId"),
        MemoryLayout.sequenceLayout(5, raylib.C_INT).withName("vboId")
    ).withName("rlVertexBuffer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt elementCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("elementCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int elementCount
     * }
     */
    public static final OfInt elementCount$layout() {
        return elementCount$LAYOUT;
    }

    private static final long elementCount$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int elementCount
     * }
     */
    public static final long elementCount$offset() {
        return elementCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int elementCount
     * }
     */
    public static int elementCount(MemorySegment struct) {
        return struct.get(elementCount$LAYOUT, elementCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int elementCount
     * }
     */
    public static void elementCount(MemorySegment struct, int fieldValue) {
        struct.set(elementCount$LAYOUT, elementCount$OFFSET, fieldValue);
    }

    private static final AddressLayout vertices$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vertices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *vertices
     * }
     */
    public static final AddressLayout vertices$layout() {
        return vertices$LAYOUT;
    }

    private static final long vertices$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *vertices
     * }
     */
    public static final long vertices$offset() {
        return vertices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *vertices
     * }
     */
    public static MemorySegment vertices(MemorySegment struct) {
        return struct.get(vertices$LAYOUT, vertices$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *vertices
     * }
     */
    public static void vertices(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vertices$LAYOUT, vertices$OFFSET, fieldValue);
    }

    private static final AddressLayout texcoords$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("texcoords"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *texcoords
     * }
     */
    public static final AddressLayout texcoords$layout() {
        return texcoords$LAYOUT;
    }

    private static final long texcoords$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *texcoords
     * }
     */
    public static final long texcoords$offset() {
        return texcoords$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *texcoords
     * }
     */
    public static MemorySegment texcoords(MemorySegment struct) {
        return struct.get(texcoords$LAYOUT, texcoords$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *texcoords
     * }
     */
    public static void texcoords(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(texcoords$LAYOUT, texcoords$OFFSET, fieldValue);
    }

    private static final AddressLayout normals$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("normals"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *normals
     * }
     */
    public static final AddressLayout normals$layout() {
        return normals$LAYOUT;
    }

    private static final long normals$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *normals
     * }
     */
    public static final long normals$offset() {
        return normals$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *normals
     * }
     */
    public static MemorySegment normals(MemorySegment struct) {
        return struct.get(normals$LAYOUT, normals$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *normals
     * }
     */
    public static void normals(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(normals$LAYOUT, normals$OFFSET, fieldValue);
    }

    private static final AddressLayout colors$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("colors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char *colors
     * }
     */
    public static final AddressLayout colors$layout() {
        return colors$LAYOUT;
    }

    private static final long colors$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char *colors
     * }
     */
    public static final long colors$offset() {
        return colors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char *colors
     * }
     */
    public static MemorySegment colors(MemorySegment struct) {
        return struct.get(colors$LAYOUT, colors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char *colors
     * }
     */
    public static void colors(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(colors$LAYOUT, colors$OFFSET, fieldValue);
    }

    private static final AddressLayout indices$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("indices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *indices
     * }
     */
    public static final AddressLayout indices$layout() {
        return indices$LAYOUT;
    }

    private static final long indices$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *indices
     * }
     */
    public static final long indices$offset() {
        return indices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *indices
     * }
     */
    public static MemorySegment indices(MemorySegment struct) {
        return struct.get(indices$LAYOUT, indices$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *indices
     * }
     */
    public static void indices(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(indices$LAYOUT, indices$OFFSET, fieldValue);
    }

    private static final OfInt vaoId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vaoId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int vaoId
     * }
     */
    public static final OfInt vaoId$layout() {
        return vaoId$LAYOUT;
    }

    private static final long vaoId$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int vaoId
     * }
     */
    public static final long vaoId$offset() {
        return vaoId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int vaoId
     * }
     */
    public static int vaoId(MemorySegment struct) {
        return struct.get(vaoId$LAYOUT, vaoId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int vaoId
     * }
     */
    public static void vaoId(MemorySegment struct, int fieldValue) {
        struct.set(vaoId$LAYOUT, vaoId$OFFSET, fieldValue);
    }

    private static final SequenceLayout vboId$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("vboId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int vboId[5]
     * }
     */
    public static final SequenceLayout vboId$layout() {
        return vboId$LAYOUT;
    }

    private static final long vboId$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int vboId[5]
     * }
     */
    public static final long vboId$offset() {
        return vboId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int vboId[5]
     * }
     */
    public static MemorySegment vboId(MemorySegment struct) {
        return struct.asSlice(vboId$OFFSET, vboId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int vboId[5]
     * }
     */
    public static void vboId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, vboId$OFFSET, vboId$LAYOUT.byteSize());
    }

    private static long[] vboId$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned int vboId[5]
     * }
     */
    public static long[] vboId$dimensions() {
        return vboId$DIMS;
    }
    private static final VarHandle vboId$ELEM_HANDLE = vboId$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned int vboId[5]
     * }
     */
    public static int vboId(MemorySegment struct, long index0) {
        return (int)vboId$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned int vboId[5]
     * }
     */
    public static void vboId(MemorySegment struct, long index0, int fieldValue) {
        vboId$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

