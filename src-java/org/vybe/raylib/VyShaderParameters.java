// Generated by jextract

package org.vybe.raylib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VyShaderParameters {
 *     int uniformsCount;
 *     VyShaderParameter uniforms[256];
 *     int attributesCount;
 *     VyShaderParameter attributes[256];
 *     int shaderId;
 * }
 * }
 */
public class VyShaderParameters {

    VyShaderParameters() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        raylib.C_INT.withName("uniformsCount"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(256, VyShaderParameter.layout()).withName("uniforms"),
        raylib.C_INT.withName("attributesCount"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(256, VyShaderParameter.layout()).withName("attributes"),
        raylib.C_INT.withName("shaderId"),
        MemoryLayout.paddingLayout(4)
    ).withName("VyShaderParameters");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt uniformsCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uniformsCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int uniformsCount
     * }
     */
    public static final OfInt uniformsCount$layout() {
        return uniformsCount$LAYOUT;
    }

    private static final long uniformsCount$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int uniformsCount
     * }
     */
    public static final long uniformsCount$offset() {
        return uniformsCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int uniformsCount
     * }
     */
    public static int uniformsCount(MemorySegment struct) {
        return struct.get(uniformsCount$LAYOUT, uniformsCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int uniformsCount
     * }
     */
    public static void uniformsCount(MemorySegment struct, int fieldValue) {
        struct.set(uniformsCount$LAYOUT, uniformsCount$OFFSET, fieldValue);
    }

    private static final SequenceLayout uniforms$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("uniforms"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VyShaderParameter uniforms[256]
     * }
     */
    public static final SequenceLayout uniforms$layout() {
        return uniforms$LAYOUT;
    }

    private static final long uniforms$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VyShaderParameter uniforms[256]
     * }
     */
    public static final long uniforms$offset() {
        return uniforms$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VyShaderParameter uniforms[256]
     * }
     */
    public static MemorySegment uniforms(MemorySegment struct) {
        return struct.asSlice(uniforms$OFFSET, uniforms$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VyShaderParameter uniforms[256]
     * }
     */
    public static void uniforms(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, uniforms$OFFSET, uniforms$LAYOUT.byteSize());
    }

    private static long[] uniforms$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * VyShaderParameter uniforms[256]
     * }
     */
    public static long[] uniforms$dimensions() {
        return uniforms$DIMS;
    }
    private static final MethodHandle uniforms$ELEM_HANDLE = uniforms$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * VyShaderParameter uniforms[256]
     * }
     */
    public static MemorySegment uniforms(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)uniforms$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * VyShaderParameter uniforms[256]
     * }
     */
    public static void uniforms(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, uniforms(struct, index0), 0L, VyShaderParameter.layout().byteSize());
    }

    private static final OfInt attributesCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("attributesCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int attributesCount
     * }
     */
    public static final OfInt attributesCount$layout() {
        return attributesCount$LAYOUT;
    }

    private static final long attributesCount$OFFSET = 6152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int attributesCount
     * }
     */
    public static final long attributesCount$offset() {
        return attributesCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int attributesCount
     * }
     */
    public static int attributesCount(MemorySegment struct) {
        return struct.get(attributesCount$LAYOUT, attributesCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int attributesCount
     * }
     */
    public static void attributesCount(MemorySegment struct, int fieldValue) {
        struct.set(attributesCount$LAYOUT, attributesCount$OFFSET, fieldValue);
    }

    private static final SequenceLayout attributes$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("attributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VyShaderParameter attributes[256]
     * }
     */
    public static final SequenceLayout attributes$layout() {
        return attributes$LAYOUT;
    }

    private static final long attributes$OFFSET = 6160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VyShaderParameter attributes[256]
     * }
     */
    public static final long attributes$offset() {
        return attributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VyShaderParameter attributes[256]
     * }
     */
    public static MemorySegment attributes(MemorySegment struct) {
        return struct.asSlice(attributes$OFFSET, attributes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VyShaderParameter attributes[256]
     * }
     */
    public static void attributes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, attributes$OFFSET, attributes$LAYOUT.byteSize());
    }

    private static long[] attributes$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * VyShaderParameter attributes[256]
     * }
     */
    public static long[] attributes$dimensions() {
        return attributes$DIMS;
    }
    private static final MethodHandle attributes$ELEM_HANDLE = attributes$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * VyShaderParameter attributes[256]
     * }
     */
    public static MemorySegment attributes(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)attributes$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * VyShaderParameter attributes[256]
     * }
     */
    public static void attributes(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, attributes(struct, index0), 0L, VyShaderParameter.layout().byteSize());
    }

    private static final OfInt shaderId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int shaderId
     * }
     */
    public static final OfInt shaderId$layout() {
        return shaderId$LAYOUT;
    }

    private static final long shaderId$OFFSET = 12304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int shaderId
     * }
     */
    public static final long shaderId$offset() {
        return shaderId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int shaderId
     * }
     */
    public static int shaderId(MemorySegment struct) {
        return struct.get(shaderId$LAYOUT, shaderId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int shaderId
     * }
     */
    public static void shaderId(MemorySegment struct, int fieldValue) {
        struct.set(shaderId$LAYOUT, shaderId$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

