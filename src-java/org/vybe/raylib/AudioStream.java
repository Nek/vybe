// Generated by jextract

package org.vybe.raylib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct AudioStream {
 *     rAudioBuffer *buffer;
 *     rAudioProcessor *processor;
 *     unsigned int sampleRate;
 *     unsigned int sampleSize;
 *     unsigned int channels;
 * }
 * }
 */
public class AudioStream {

    AudioStream() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        raylib.C_POINTER.withName("buffer"),
        raylib.C_POINTER.withName("processor"),
        raylib.C_INT.withName("sampleRate"),
        raylib.C_INT.withName("sampleSize"),
        raylib.C_INT.withName("channels"),
        MemoryLayout.paddingLayout(4)
    ).withName("AudioStream");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rAudioBuffer *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rAudioBuffer *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rAudioBuffer *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rAudioBuffer *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final AddressLayout processor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("processor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rAudioProcessor *processor
     * }
     */
    public static final AddressLayout processor$layout() {
        return processor$LAYOUT;
    }

    private static final long processor$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rAudioProcessor *processor
     * }
     */
    public static final long processor$offset() {
        return processor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rAudioProcessor *processor
     * }
     */
    public static MemorySegment processor(MemorySegment struct) {
        return struct.get(processor$LAYOUT, processor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rAudioProcessor *processor
     * }
     */
    public static void processor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(processor$LAYOUT, processor$OFFSET, fieldValue);
    }

    private static final OfInt sampleRate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sampleRate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int sampleRate
     * }
     */
    public static final OfInt sampleRate$layout() {
        return sampleRate$LAYOUT;
    }

    private static final long sampleRate$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int sampleRate
     * }
     */
    public static final long sampleRate$offset() {
        return sampleRate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int sampleRate
     * }
     */
    public static int sampleRate(MemorySegment struct) {
        return struct.get(sampleRate$LAYOUT, sampleRate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int sampleRate
     * }
     */
    public static void sampleRate(MemorySegment struct, int fieldValue) {
        struct.set(sampleRate$LAYOUT, sampleRate$OFFSET, fieldValue);
    }

    private static final OfInt sampleSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sampleSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int sampleSize
     * }
     */
    public static final OfInt sampleSize$layout() {
        return sampleSize$LAYOUT;
    }

    private static final long sampleSize$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int sampleSize
     * }
     */
    public static final long sampleSize$offset() {
        return sampleSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int sampleSize
     * }
     */
    public static int sampleSize(MemorySegment struct) {
        return struct.get(sampleSize$LAYOUT, sampleSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int sampleSize
     * }
     */
    public static void sampleSize(MemorySegment struct, int fieldValue) {
        struct.set(sampleSize$LAYOUT, sampleSize$OFFSET, fieldValue);
    }

    private static final OfInt channels$LAYOUT = (OfInt)$LAYOUT.select(groupElement("channels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int channels
     * }
     */
    public static final OfInt channels$layout() {
        return channels$LAYOUT;
    }

    private static final long channels$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int channels
     * }
     */
    public static final long channels$offset() {
        return channels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int channels
     * }
     */
    public static int channels(MemorySegment struct) {
        return struct.get(channels$LAYOUT, channels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int channels
     * }
     */
    public static void channels(MemorySegment struct, int fieldValue) {
        struct.set(channels$LAYOUT, channels$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

