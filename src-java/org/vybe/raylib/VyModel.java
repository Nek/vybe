// Generated by jextract

package org.vybe.raylib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VyModel {
 *     Model model;
 *     int metaCount;
 *     VyModelMeta *meta;
 *     VyMesh *meshes;
 * }
 * }
 */
public class VyModel {

    VyModel() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Model.layout().withName("model"),
        raylib.C_INT.withName("metaCount"),
        MemoryLayout.paddingLayout(4),
        raylib.C_POINTER.withName("meta"),
        raylib.C_POINTER.withName("meshes")
    ).withName("VyModel");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout model$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("model"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Model model
     * }
     */
    public static final GroupLayout model$layout() {
        return model$LAYOUT;
    }

    private static final long model$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Model model
     * }
     */
    public static final long model$offset() {
        return model$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Model model
     * }
     */
    public static MemorySegment model(MemorySegment struct) {
        return struct.asSlice(model$OFFSET, model$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Model model
     * }
     */
    public static void model(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, model$OFFSET, model$LAYOUT.byteSize());
    }

    private static final OfInt metaCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("metaCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int metaCount
     * }
     */
    public static final OfInt metaCount$layout() {
        return metaCount$LAYOUT;
    }

    private static final long metaCount$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int metaCount
     * }
     */
    public static final long metaCount$offset() {
        return metaCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int metaCount
     * }
     */
    public static int metaCount(MemorySegment struct) {
        return struct.get(metaCount$LAYOUT, metaCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int metaCount
     * }
     */
    public static void metaCount(MemorySegment struct, int fieldValue) {
        struct.set(metaCount$LAYOUT, metaCount$OFFSET, fieldValue);
    }

    private static final AddressLayout meta$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("meta"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VyModelMeta *meta
     * }
     */
    public static final AddressLayout meta$layout() {
        return meta$LAYOUT;
    }

    private static final long meta$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VyModelMeta *meta
     * }
     */
    public static final long meta$offset() {
        return meta$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VyModelMeta *meta
     * }
     */
    public static MemorySegment meta(MemorySegment struct) {
        return struct.get(meta$LAYOUT, meta$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VyModelMeta *meta
     * }
     */
    public static void meta(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(meta$LAYOUT, meta$OFFSET, fieldValue);
    }

    private static final AddressLayout meshes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("meshes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VyMesh *meshes
     * }
     */
    public static final AddressLayout meshes$layout() {
        return meshes$LAYOUT;
    }

    private static final long meshes$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VyMesh *meshes
     * }
     */
    public static final long meshes$offset() {
        return meshes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VyMesh *meshes
     * }
     */
    public static MemorySegment meshes(MemorySegment struct) {
        return struct.get(meshes$LAYOUT, meshes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VyMesh *meshes
     * }
     */
    public static void meshes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(meshes$LAYOUT, meshes$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

