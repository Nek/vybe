// Generated by jextract

package org.vybe.jolt;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPC_CharacterBaseSettings {
 *     const void *__vtable_header[2];
 *     float up[4];
 *     float supporting_volume[4];
 *     float max_slope_angle;
 *     const JPC_Shape *shape;
 * }
 * }
 */
public class JPC_CharacterBaseSettings {

    JPC_CharacterBaseSettings() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(2, jolt.C_POINTER).withName("__vtable_header"),
        MemoryLayout.sequenceLayout(4, jolt.C_FLOAT).withName("up"),
        MemoryLayout.sequenceLayout(4, jolt.C_FLOAT).withName("supporting_volume"),
        jolt.C_FLOAT.withName("max_slope_angle"),
        MemoryLayout.paddingLayout(4),
        jolt.C_POINTER.withName("shape")
    ).withName("JPC_CharacterBaseSettings");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout __vtable_header$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__vtable_header"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static final SequenceLayout __vtable_header$layout() {
        return __vtable_header$LAYOUT;
    }

    private static final long __vtable_header$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static final long __vtable_header$offset() {
        return __vtable_header$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static MemorySegment __vtable_header(MemorySegment struct) {
        return struct.asSlice(__vtable_header$OFFSET, __vtable_header$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static void __vtable_header(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __vtable_header$OFFSET, __vtable_header$LAYOUT.byteSize());
    }

    private static long[] __vtable_header$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static long[] __vtable_header$dimensions() {
        return __vtable_header$DIMS;
    }
    private static final VarHandle __vtable_header$ELEM_HANDLE = __vtable_header$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static MemorySegment __vtable_header(MemorySegment struct, long index0) {
        return (MemorySegment)__vtable_header$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static void __vtable_header(MemorySegment struct, long index0, MemorySegment fieldValue) {
        __vtable_header$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout up$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("up"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float up[4]
     * }
     */
    public static final SequenceLayout up$layout() {
        return up$LAYOUT;
    }

    private static final long up$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float up[4]
     * }
     */
    public static final long up$offset() {
        return up$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float up[4]
     * }
     */
    public static MemorySegment up(MemorySegment struct) {
        return struct.asSlice(up$OFFSET, up$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float up[4]
     * }
     */
    public static void up(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, up$OFFSET, up$LAYOUT.byteSize());
    }

    private static long[] up$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float up[4]
     * }
     */
    public static long[] up$dimensions() {
        return up$DIMS;
    }
    private static final VarHandle up$ELEM_HANDLE = up$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float up[4]
     * }
     */
    public static float up(MemorySegment struct, long index0) {
        return (float)up$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float up[4]
     * }
     */
    public static void up(MemorySegment struct, long index0, float fieldValue) {
        up$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout supporting_volume$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("supporting_volume"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float supporting_volume[4]
     * }
     */
    public static final SequenceLayout supporting_volume$layout() {
        return supporting_volume$LAYOUT;
    }

    private static final long supporting_volume$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float supporting_volume[4]
     * }
     */
    public static final long supporting_volume$offset() {
        return supporting_volume$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float supporting_volume[4]
     * }
     */
    public static MemorySegment supporting_volume(MemorySegment struct) {
        return struct.asSlice(supporting_volume$OFFSET, supporting_volume$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float supporting_volume[4]
     * }
     */
    public static void supporting_volume(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, supporting_volume$OFFSET, supporting_volume$LAYOUT.byteSize());
    }

    private static long[] supporting_volume$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float supporting_volume[4]
     * }
     */
    public static long[] supporting_volume$dimensions() {
        return supporting_volume$DIMS;
    }
    private static final VarHandle supporting_volume$ELEM_HANDLE = supporting_volume$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float supporting_volume[4]
     * }
     */
    public static float supporting_volume(MemorySegment struct, long index0) {
        return (float)supporting_volume$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float supporting_volume[4]
     * }
     */
    public static void supporting_volume(MemorySegment struct, long index0, float fieldValue) {
        supporting_volume$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfFloat max_slope_angle$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("max_slope_angle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float max_slope_angle
     * }
     */
    public static final OfFloat max_slope_angle$layout() {
        return max_slope_angle$LAYOUT;
    }

    private static final long max_slope_angle$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float max_slope_angle
     * }
     */
    public static final long max_slope_angle$offset() {
        return max_slope_angle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float max_slope_angle
     * }
     */
    public static float max_slope_angle(MemorySegment struct) {
        return struct.get(max_slope_angle$LAYOUT, max_slope_angle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float max_slope_angle
     * }
     */
    public static void max_slope_angle(MemorySegment struct, float fieldValue) {
        struct.set(max_slope_angle$LAYOUT, max_slope_angle$OFFSET, fieldValue);
    }

    private static final AddressLayout shape$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("shape"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const JPC_Shape *shape
     * }
     */
    public static final AddressLayout shape$layout() {
        return shape$LAYOUT;
    }

    private static final long shape$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const JPC_Shape *shape
     * }
     */
    public static final long shape$offset() {
        return shape$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const JPC_Shape *shape
     * }
     */
    public static MemorySegment shape(MemorySegment struct) {
        return struct.get(shape$LAYOUT, shape$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const JPC_Shape *shape
     * }
     */
    public static void shape(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(shape$LAYOUT, shape$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

