// Generated by jextract

package org.vybe.jolt;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPC_CollisionGroup {
 *     const JPC_GroupFilter *filter;
 *     JPC_CollisionGroupID group_id;
 *     JPC_CollisionSubGroupID sub_group_id;
 * }
 * }
 */
public class JPC_CollisionGroup {

    JPC_CollisionGroup() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        jolt.C_POINTER.withName("filter"),
        jolt.C_INT.withName("group_id"),
        jolt.C_INT.withName("sub_group_id")
    ).withName("JPC_CollisionGroup");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout filter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("filter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const JPC_GroupFilter *filter
     * }
     */
    public static final AddressLayout filter$layout() {
        return filter$LAYOUT;
    }

    private static final long filter$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const JPC_GroupFilter *filter
     * }
     */
    public static final long filter$offset() {
        return filter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const JPC_GroupFilter *filter
     * }
     */
    public static MemorySegment filter(MemorySegment struct) {
        return struct.get(filter$LAYOUT, filter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const JPC_GroupFilter *filter
     * }
     */
    public static void filter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(filter$LAYOUT, filter$OFFSET, fieldValue);
    }

    private static final OfInt group_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("group_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPC_CollisionGroupID group_id
     * }
     */
    public static final OfInt group_id$layout() {
        return group_id$LAYOUT;
    }

    private static final long group_id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPC_CollisionGroupID group_id
     * }
     */
    public static final long group_id$offset() {
        return group_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPC_CollisionGroupID group_id
     * }
     */
    public static int group_id(MemorySegment struct) {
        return struct.get(group_id$LAYOUT, group_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPC_CollisionGroupID group_id
     * }
     */
    public static void group_id(MemorySegment struct, int fieldValue) {
        struct.set(group_id$LAYOUT, group_id$OFFSET, fieldValue);
    }

    private static final OfInt sub_group_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sub_group_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPC_CollisionSubGroupID sub_group_id
     * }
     */
    public static final OfInt sub_group_id$layout() {
        return sub_group_id$LAYOUT;
    }

    private static final long sub_group_id$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPC_CollisionSubGroupID sub_group_id
     * }
     */
    public static final long sub_group_id$offset() {
        return sub_group_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPC_CollisionSubGroupID sub_group_id
     * }
     */
    public static int sub_group_id(MemorySegment struct) {
        return struct.get(sub_group_id$LAYOUT, sub_group_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPC_CollisionSubGroupID sub_group_id
     * }
     */
    public static void sub_group_id(MemorySegment struct, int fieldValue) {
        struct.set(sub_group_id$LAYOUT, sub_group_id$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

