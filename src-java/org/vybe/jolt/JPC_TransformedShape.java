// Generated by jextract

package org.vybe.jolt;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPC_TransformedShape {
 *     JPC_Real shape_position_com[4];
 *     float shape_rotation[4];
 *     const JPC_Shape *shape;
 *     float shape_scale[3];
 *     JPC_BodyID body_id;
 *     JPC_SubShapeIDCreator sub_shape_id_creator;
 * }
 * }
 */
public class JPC_TransformedShape {

    JPC_TransformedShape() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, jolt.C_FLOAT).withName("shape_position_com"),
        MemoryLayout.sequenceLayout(4, jolt.C_FLOAT).withName("shape_rotation"),
        jolt.C_POINTER.withName("shape"),
        MemoryLayout.sequenceLayout(3, jolt.C_FLOAT).withName("shape_scale"),
        jolt.C_INT.withName("body_id"),
        JPC_SubShapeIDCreator.layout().withName("sub_shape_id_creator")
    ).withName("JPC_TransformedShape");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout shape_position_com$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("shape_position_com"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPC_Real shape_position_com[4]
     * }
     */
    public static final SequenceLayout shape_position_com$layout() {
        return shape_position_com$LAYOUT;
    }

    private static final long shape_position_com$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPC_Real shape_position_com[4]
     * }
     */
    public static final long shape_position_com$offset() {
        return shape_position_com$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPC_Real shape_position_com[4]
     * }
     */
    public static MemorySegment shape_position_com(MemorySegment struct) {
        return struct.asSlice(shape_position_com$OFFSET, shape_position_com$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPC_Real shape_position_com[4]
     * }
     */
    public static void shape_position_com(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, shape_position_com$OFFSET, shape_position_com$LAYOUT.byteSize());
    }

    private static long[] shape_position_com$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * JPC_Real shape_position_com[4]
     * }
     */
    public static long[] shape_position_com$dimensions() {
        return shape_position_com$DIMS;
    }
    private static final VarHandle shape_position_com$ELEM_HANDLE = shape_position_com$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * JPC_Real shape_position_com[4]
     * }
     */
    public static float shape_position_com(MemorySegment struct, long index0) {
        return (float)shape_position_com$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * JPC_Real shape_position_com[4]
     * }
     */
    public static void shape_position_com(MemorySegment struct, long index0, float fieldValue) {
        shape_position_com$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout shape_rotation$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("shape_rotation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float shape_rotation[4]
     * }
     */
    public static final SequenceLayout shape_rotation$layout() {
        return shape_rotation$LAYOUT;
    }

    private static final long shape_rotation$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float shape_rotation[4]
     * }
     */
    public static final long shape_rotation$offset() {
        return shape_rotation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float shape_rotation[4]
     * }
     */
    public static MemorySegment shape_rotation(MemorySegment struct) {
        return struct.asSlice(shape_rotation$OFFSET, shape_rotation$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float shape_rotation[4]
     * }
     */
    public static void shape_rotation(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, shape_rotation$OFFSET, shape_rotation$LAYOUT.byteSize());
    }

    private static long[] shape_rotation$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float shape_rotation[4]
     * }
     */
    public static long[] shape_rotation$dimensions() {
        return shape_rotation$DIMS;
    }
    private static final VarHandle shape_rotation$ELEM_HANDLE = shape_rotation$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float shape_rotation[4]
     * }
     */
    public static float shape_rotation(MemorySegment struct, long index0) {
        return (float)shape_rotation$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float shape_rotation[4]
     * }
     */
    public static void shape_rotation(MemorySegment struct, long index0, float fieldValue) {
        shape_rotation$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout shape$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("shape"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const JPC_Shape *shape
     * }
     */
    public static final AddressLayout shape$layout() {
        return shape$LAYOUT;
    }

    private static final long shape$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const JPC_Shape *shape
     * }
     */
    public static final long shape$offset() {
        return shape$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const JPC_Shape *shape
     * }
     */
    public static MemorySegment shape(MemorySegment struct) {
        return struct.get(shape$LAYOUT, shape$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const JPC_Shape *shape
     * }
     */
    public static void shape(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(shape$LAYOUT, shape$OFFSET, fieldValue);
    }

    private static final SequenceLayout shape_scale$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("shape_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float shape_scale[3]
     * }
     */
    public static final SequenceLayout shape_scale$layout() {
        return shape_scale$LAYOUT;
    }

    private static final long shape_scale$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float shape_scale[3]
     * }
     */
    public static final long shape_scale$offset() {
        return shape_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float shape_scale[3]
     * }
     */
    public static MemorySegment shape_scale(MemorySegment struct) {
        return struct.asSlice(shape_scale$OFFSET, shape_scale$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float shape_scale[3]
     * }
     */
    public static void shape_scale(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, shape_scale$OFFSET, shape_scale$LAYOUT.byteSize());
    }

    private static long[] shape_scale$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float shape_scale[3]
     * }
     */
    public static long[] shape_scale$dimensions() {
        return shape_scale$DIMS;
    }
    private static final VarHandle shape_scale$ELEM_HANDLE = shape_scale$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float shape_scale[3]
     * }
     */
    public static float shape_scale(MemorySegment struct, long index0) {
        return (float)shape_scale$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float shape_scale[3]
     * }
     */
    public static void shape_scale(MemorySegment struct, long index0, float fieldValue) {
        shape_scale$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt body_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("body_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPC_BodyID body_id
     * }
     */
    public static final OfInt body_id$layout() {
        return body_id$LAYOUT;
    }

    private static final long body_id$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPC_BodyID body_id
     * }
     */
    public static final long body_id$offset() {
        return body_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPC_BodyID body_id
     * }
     */
    public static int body_id(MemorySegment struct) {
        return struct.get(body_id$LAYOUT, body_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPC_BodyID body_id
     * }
     */
    public static void body_id(MemorySegment struct, int fieldValue) {
        struct.set(body_id$LAYOUT, body_id$OFFSET, fieldValue);
    }

    private static final GroupLayout sub_shape_id_creator$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sub_shape_id_creator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPC_SubShapeIDCreator sub_shape_id_creator
     * }
     */
    public static final GroupLayout sub_shape_id_creator$layout() {
        return sub_shape_id_creator$LAYOUT;
    }

    private static final long sub_shape_id_creator$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPC_SubShapeIDCreator sub_shape_id_creator
     * }
     */
    public static final long sub_shape_id_creator$offset() {
        return sub_shape_id_creator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPC_SubShapeIDCreator sub_shape_id_creator
     * }
     */
    public static MemorySegment sub_shape_id_creator(MemorySegment struct) {
        return struct.asSlice(sub_shape_id_creator$OFFSET, sub_shape_id_creator$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPC_SubShapeIDCreator sub_shape_id_creator
     * }
     */
    public static void sub_shape_id_creator(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sub_shape_id_creator$OFFSET, sub_shape_id_creator$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

