// Generated by jextract

package org.vybe.jolt;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPC_MassProperties {
 *     float mass;
 *     float inertia[16];
 * }
 * }
 */
public class JPC_MassProperties {

    JPC_MassProperties() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        jolt.C_FLOAT.withName("mass"),
        MemoryLayout.paddingLayout(12),
        MemoryLayout.sequenceLayout(16, jolt.C_FLOAT).withName("inertia")
    ).withName("JPC_MassProperties");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat mass$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("mass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float mass
     * }
     */
    public static final OfFloat mass$layout() {
        return mass$LAYOUT;
    }

    private static final long mass$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float mass
     * }
     */
    public static final long mass$offset() {
        return mass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float mass
     * }
     */
    public static float mass(MemorySegment struct) {
        return struct.get(mass$LAYOUT, mass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float mass
     * }
     */
    public static void mass(MemorySegment struct, float fieldValue) {
        struct.set(mass$LAYOUT, mass$OFFSET, fieldValue);
    }

    private static final SequenceLayout inertia$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("inertia"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float inertia[16]
     * }
     */
    public static final SequenceLayout inertia$layout() {
        return inertia$LAYOUT;
    }

    private static final long inertia$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float inertia[16]
     * }
     */
    public static final long inertia$offset() {
        return inertia$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float inertia[16]
     * }
     */
    public static MemorySegment inertia(MemorySegment struct) {
        return struct.asSlice(inertia$OFFSET, inertia$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float inertia[16]
     * }
     */
    public static void inertia(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, inertia$OFFSET, inertia$LAYOUT.byteSize());
    }

    private static long[] inertia$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float inertia[16]
     * }
     */
    public static long[] inertia$dimensions() {
        return inertia$DIMS;
    }
    private static final VarHandle inertia$ELEM_HANDLE = inertia$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float inertia[16]
     * }
     */
    public static float inertia(MemorySegment struct, long index0) {
        return (float)inertia$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float inertia[16]
     * }
     */
    public static void inertia(MemorySegment struct, long index0, float fieldValue) {
        inertia$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

