// Generated by jextract

package org.vybe.jolt;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPC_ContactSettings {
 *     float combined_friction;
 *     float combined_restitution;
 *     bool is_sensor;
 * }
 * }
 */
public class JPC_ContactSettings {

    JPC_ContactSettings() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        jolt.C_FLOAT.withName("combined_friction"),
        jolt.C_FLOAT.withName("combined_restitution"),
        jolt.C_BOOL.withName("is_sensor"),
        MemoryLayout.paddingLayout(3)
    ).withName("JPC_ContactSettings");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat combined_friction$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("combined_friction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float combined_friction
     * }
     */
    public static final OfFloat combined_friction$layout() {
        return combined_friction$LAYOUT;
    }

    private static final long combined_friction$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float combined_friction
     * }
     */
    public static final long combined_friction$offset() {
        return combined_friction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float combined_friction
     * }
     */
    public static float combined_friction(MemorySegment struct) {
        return struct.get(combined_friction$LAYOUT, combined_friction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float combined_friction
     * }
     */
    public static void combined_friction(MemorySegment struct, float fieldValue) {
        struct.set(combined_friction$LAYOUT, combined_friction$OFFSET, fieldValue);
    }

    private static final OfFloat combined_restitution$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("combined_restitution"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float combined_restitution
     * }
     */
    public static final OfFloat combined_restitution$layout() {
        return combined_restitution$LAYOUT;
    }

    private static final long combined_restitution$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float combined_restitution
     * }
     */
    public static final long combined_restitution$offset() {
        return combined_restitution$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float combined_restitution
     * }
     */
    public static float combined_restitution(MemorySegment struct) {
        return struct.get(combined_restitution$LAYOUT, combined_restitution$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float combined_restitution
     * }
     */
    public static void combined_restitution(MemorySegment struct, float fieldValue) {
        struct.set(combined_restitution$LAYOUT, combined_restitution$OFFSET, fieldValue);
    }

    private static final OfBoolean is_sensor$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_sensor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_sensor
     * }
     */
    public static final OfBoolean is_sensor$layout() {
        return is_sensor$LAYOUT;
    }

    private static final long is_sensor$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_sensor
     * }
     */
    public static final long is_sensor$offset() {
        return is_sensor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_sensor
     * }
     */
    public static boolean is_sensor(MemorySegment struct) {
        return struct.get(is_sensor$LAYOUT, is_sensor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_sensor
     * }
     */
    public static void is_sensor(MemorySegment struct, boolean fieldValue) {
        struct.set(is_sensor$LAYOUT, is_sensor$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

