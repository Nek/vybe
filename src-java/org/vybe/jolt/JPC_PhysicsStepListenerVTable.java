// Generated by jextract

package org.vybe.jolt;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPC_PhysicsStepListenerVTable {
 *     const void *__vtable_header[2];
 *     void (*OnStep)(float, JPC_PhysicsSystem *);
 * }
 * }
 */
public class JPC_PhysicsStepListenerVTable {

    JPC_PhysicsStepListenerVTable() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(2, jolt.C_POINTER).withName("__vtable_header"),
        jolt.C_POINTER.withName("OnStep")
    ).withName("JPC_PhysicsStepListenerVTable");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout __vtable_header$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__vtable_header"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static final SequenceLayout __vtable_header$layout() {
        return __vtable_header$LAYOUT;
    }

    private static final long __vtable_header$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static final long __vtable_header$offset() {
        return __vtable_header$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static MemorySegment __vtable_header(MemorySegment struct) {
        return struct.asSlice(__vtable_header$OFFSET, __vtable_header$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static void __vtable_header(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __vtable_header$OFFSET, __vtable_header$LAYOUT.byteSize());
    }

    private static long[] __vtable_header$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static long[] __vtable_header$dimensions() {
        return __vtable_header$DIMS;
    }
    private static final VarHandle __vtable_header$ELEM_HANDLE = __vtable_header$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static MemorySegment __vtable_header(MemorySegment struct, long index0) {
        return (MemorySegment)__vtable_header$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * const void *__vtable_header[2]
     * }
     */
    public static void __vtable_header(MemorySegment struct, long index0, MemorySegment fieldValue) {
        __vtable_header$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*OnStep)(float, JPC_PhysicsSystem *)
     * }
     */
    public static class OnStep {

        OnStep() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(float _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = jolt.upcallHandle(OnStep.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnStep.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,float _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnStep$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnStep"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*OnStep)(float, JPC_PhysicsSystem *)
     * }
     */
    public static final AddressLayout OnStep$layout() {
        return OnStep$LAYOUT;
    }

    private static final long OnStep$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*OnStep)(float, JPC_PhysicsSystem *)
     * }
     */
    public static final long OnStep$offset() {
        return OnStep$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*OnStep)(float, JPC_PhysicsSystem *)
     * }
     */
    public static MemorySegment OnStep(MemorySegment struct) {
        return struct.get(OnStep$LAYOUT, OnStep$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*OnStep)(float, JPC_PhysicsSystem *)
     * }
     */
    public static void OnStep(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnStep$LAYOUT, OnStep$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

