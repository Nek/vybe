// Generated by jextract

package org.vybe.jolt;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPC_BodyLockRead {
 *     const JPC_BodyLockInterface *lock_interface;
 *     JPC_SharedMutex *mutex;
 *     const JPC_Body *body;
 * }
 * }
 */
public class JPC_BodyLockRead {

    JPC_BodyLockRead() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        jolt.C_POINTER.withName("lock_interface"),
        jolt.C_POINTER.withName("mutex"),
        jolt.C_POINTER.withName("body")
    ).withName("JPC_BodyLockRead");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout lock_interface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lock_interface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const JPC_BodyLockInterface *lock_interface
     * }
     */
    public static final AddressLayout lock_interface$layout() {
        return lock_interface$LAYOUT;
    }

    private static final long lock_interface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const JPC_BodyLockInterface *lock_interface
     * }
     */
    public static final long lock_interface$offset() {
        return lock_interface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const JPC_BodyLockInterface *lock_interface
     * }
     */
    public static MemorySegment lock_interface(MemorySegment struct) {
        return struct.get(lock_interface$LAYOUT, lock_interface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const JPC_BodyLockInterface *lock_interface
     * }
     */
    public static void lock_interface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lock_interface$LAYOUT, lock_interface$OFFSET, fieldValue);
    }

    private static final AddressLayout mutex$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mutex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPC_SharedMutex *mutex
     * }
     */
    public static final AddressLayout mutex$layout() {
        return mutex$LAYOUT;
    }

    private static final long mutex$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPC_SharedMutex *mutex
     * }
     */
    public static final long mutex$offset() {
        return mutex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPC_SharedMutex *mutex
     * }
     */
    public static MemorySegment mutex(MemorySegment struct) {
        return struct.get(mutex$LAYOUT, mutex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPC_SharedMutex *mutex
     * }
     */
    public static void mutex(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mutex$LAYOUT, mutex$OFFSET, fieldValue);
    }

    private static final AddressLayout body$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("body"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const JPC_Body *body
     * }
     */
    public static final AddressLayout body$layout() {
        return body$LAYOUT;
    }

    private static final long body$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const JPC_Body *body
     * }
     */
    public static final long body$offset() {
        return body$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const JPC_Body *body
     * }
     */
    public static MemorySegment body(MemorySegment struct) {
        return struct.get(body$LAYOUT, body$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const JPC_Body *body
     * }
     */
    public static void body(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(body$LAYOUT, body$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

