// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_meta_type_op_t {
 *     ecs_meta_type_op_kind_t kind;
 *     ecs_size_t offset;
 *     int32_t count;
 *     const char *name;
 *     int32_t op_count;
 *     ecs_size_t size;
 *     ecs_entity_t type;
 *     int32_t member_index;
 *     ecs_hashmap_t *members;
 * }
 * }
 */
public class ecs_meta_type_op_t {

    ecs_meta_type_op_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_INT.withName("kind"),
        flecs.C_INT.withName("offset"),
        flecs.C_INT.withName("count"),
        MemoryLayout.paddingLayout(4),
        flecs.C_POINTER.withName("name"),
        flecs.C_INT.withName("op_count"),
        flecs.C_INT.withName("size"),
        flecs.C_LONG_LONG.withName("type"),
        flecs.C_INT.withName("member_index"),
        MemoryLayout.paddingLayout(4),
        flecs.C_POINTER.withName("members")
    ).withName("ecs_meta_type_op_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt kind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("kind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_meta_type_op_kind_t kind
     * }
     */
    public static final OfInt kind$layout() {
        return kind$LAYOUT;
    }

    private static final long kind$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_meta_type_op_kind_t kind
     * }
     */
    public static final long kind$offset() {
        return kind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_meta_type_op_kind_t kind
     * }
     */
    public static int kind(MemorySegment struct) {
        return struct.get(kind$LAYOUT, kind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_meta_type_op_kind_t kind
     * }
     */
    public static void kind(MemorySegment struct, int fieldValue) {
        struct.set(kind$LAYOUT, kind$OFFSET, fieldValue);
    }

    private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_size_t offset
     * }
     */
    public static final OfInt offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_size_t offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_size_t offset
     * }
     */
    public static int offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_size_t offset
     * }
     */
    public static void offset(MemorySegment struct, int fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static final OfInt count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static int count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static void count(MemorySegment struct, int fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt op_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("op_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t op_count
     * }
     */
    public static final OfInt op_count$layout() {
        return op_count$LAYOUT;
    }

    private static final long op_count$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t op_count
     * }
     */
    public static final long op_count$offset() {
        return op_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t op_count
     * }
     */
    public static int op_count(MemorySegment struct) {
        return struct.get(op_count$LAYOUT, op_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t op_count
     * }
     */
    public static void op_count(MemorySegment struct, int fieldValue) {
        struct.set(op_count$LAYOUT, op_count$OFFSET, fieldValue);
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_size_t size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_size_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_size_t size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_size_t size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfLong type$LAYOUT = (OfLong)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t type
     * }
     */
    public static final OfLong type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t type
     * }
     */
    public static long type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t type
     * }
     */
    public static void type(MemorySegment struct, long fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt member_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("member_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t member_index
     * }
     */
    public static final OfInt member_index$layout() {
        return member_index$LAYOUT;
    }

    private static final long member_index$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t member_index
     * }
     */
    public static final long member_index$offset() {
        return member_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t member_index
     * }
     */
    public static int member_index(MemorySegment struct) {
        return struct.get(member_index$LAYOUT, member_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t member_index
     * }
     */
    public static void member_index(MemorySegment struct, int fieldValue) {
        struct.set(member_index$LAYOUT, member_index$OFFSET, fieldValue);
    }

    private static final AddressLayout members$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("members"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_hashmap_t *members
     * }
     */
    public static final AddressLayout members$layout() {
        return members$LAYOUT;
    }

    private static final long members$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_hashmap_t *members
     * }
     */
    public static final long members$offset() {
        return members$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_hashmap_t *members
     * }
     */
    public static MemorySegment members(MemorySegment struct) {
        return struct.get(members$LAYOUT, members$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_hashmap_t *members
     * }
     */
    public static void members(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(members$LAYOUT, members$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

