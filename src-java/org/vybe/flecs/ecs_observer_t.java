// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_observer_t {
 *     ecs_header_t hdr;
 *     ecs_query_t *query;
 *     ecs_entity_t events[8];
 *     int32_t event_count;
 *     ecs_iter_action_t callback;
 *     ecs_run_action_t run;
 *     void *ctx;
 *     void *callback_ctx;
 *     void *run_ctx;
 *     ecs_ctx_free_t ctx_free;
 *     ecs_ctx_free_t callback_ctx_free;
 *     ecs_ctx_free_t run_ctx_free;
 *     ecs_observable_t *observable;
 *     ecs_world_t *world;
 *     ecs_entity_t entity;
 * }
 * }
 */
public class ecs_observer_t {

    ecs_observer_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ecs_header_t.layout().withName("hdr"),
        flecs.C_POINTER.withName("query"),
        MemoryLayout.sequenceLayout(8, flecs.C_LONG_LONG).withName("events"),
        flecs.C_INT.withName("event_count"),
        MemoryLayout.paddingLayout(4),
        flecs.C_POINTER.withName("callback"),
        flecs.C_POINTER.withName("run"),
        flecs.C_POINTER.withName("ctx"),
        flecs.C_POINTER.withName("callback_ctx"),
        flecs.C_POINTER.withName("run_ctx"),
        flecs.C_POINTER.withName("ctx_free"),
        flecs.C_POINTER.withName("callback_ctx_free"),
        flecs.C_POINTER.withName("run_ctx_free"),
        flecs.C_POINTER.withName("observable"),
        flecs.C_POINTER.withName("world"),
        flecs.C_LONG_LONG.withName("entity")
    ).withName("ecs_observer_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout hdr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("hdr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_header_t hdr
     * }
     */
    public static final GroupLayout hdr$layout() {
        return hdr$LAYOUT;
    }

    private static final long hdr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_header_t hdr
     * }
     */
    public static final long hdr$offset() {
        return hdr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_header_t hdr
     * }
     */
    public static MemorySegment hdr(MemorySegment struct) {
        return struct.asSlice(hdr$OFFSET, hdr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_header_t hdr
     * }
     */
    public static void hdr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, hdr$OFFSET, hdr$LAYOUT.byteSize());
    }

    private static final AddressLayout query$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("query"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_query_t *query
     * }
     */
    public static final AddressLayout query$layout() {
        return query$LAYOUT;
    }

    private static final long query$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_query_t *query
     * }
     */
    public static final long query$offset() {
        return query$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_query_t *query
     * }
     */
    public static MemorySegment query(MemorySegment struct) {
        return struct.get(query$LAYOUT, query$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_query_t *query
     * }
     */
    public static void query(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(query$LAYOUT, query$OFFSET, fieldValue);
    }

    private static final SequenceLayout events$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t events[8]
     * }
     */
    public static final SequenceLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t events[8]
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t events[8]
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t events[8]
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static long[] events$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ecs_entity_t events[8]
     * }
     */
    public static long[] events$dimensions() {
        return events$DIMS;
    }
    private static final VarHandle events$ELEM_HANDLE = events$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ecs_entity_t events[8]
     * }
     */
    public static long events(MemorySegment struct, long index0) {
        return (long)events$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ecs_entity_t events[8]
     * }
     */
    public static void events(MemorySegment struct, long index0, long fieldValue) {
        events$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt event_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("event_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t event_count
     * }
     */
    public static final OfInt event_count$layout() {
        return event_count$LAYOUT;
    }

    private static final long event_count$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t event_count
     * }
     */
    public static final long event_count$offset() {
        return event_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t event_count
     * }
     */
    public static int event_count(MemorySegment struct) {
        return struct.get(event_count$LAYOUT, event_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t event_count
     * }
     */
    public static void event_count(MemorySegment struct, int fieldValue) {
        struct.set(event_count$LAYOUT, event_count$OFFSET, fieldValue);
    }

    private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_iter_action_t callback
     * }
     */
    public static final AddressLayout callback$layout() {
        return callback$LAYOUT;
    }

    private static final long callback$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_iter_action_t callback
     * }
     */
    public static final long callback$offset() {
        return callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_iter_action_t callback
     * }
     */
    public static MemorySegment callback(MemorySegment struct) {
        return struct.get(callback$LAYOUT, callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_iter_action_t callback
     * }
     */
    public static void callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
    }

    private static final AddressLayout run$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("run"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_run_action_t run
     * }
     */
    public static final AddressLayout run$layout() {
        return run$LAYOUT;
    }

    private static final long run$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_run_action_t run
     * }
     */
    public static final long run$offset() {
        return run$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_run_action_t run
     * }
     */
    public static MemorySegment run(MemorySegment struct) {
        return struct.get(run$LAYOUT, run$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_run_action_t run
     * }
     */
    public static void run(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(run$LAYOUT, run$OFFSET, fieldValue);
    }

    private static final AddressLayout ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static final AddressLayout ctx$layout() {
        return ctx$LAYOUT;
    }

    private static final long ctx$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static final long ctx$offset() {
        return ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static MemorySegment ctx(MemorySegment struct) {
        return struct.get(ctx$LAYOUT, ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static void ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ctx$LAYOUT, ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout callback_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *callback_ctx
     * }
     */
    public static final AddressLayout callback_ctx$layout() {
        return callback_ctx$LAYOUT;
    }

    private static final long callback_ctx$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *callback_ctx
     * }
     */
    public static final long callback_ctx$offset() {
        return callback_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *callback_ctx
     * }
     */
    public static MemorySegment callback_ctx(MemorySegment struct) {
        return struct.get(callback_ctx$LAYOUT, callback_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *callback_ctx
     * }
     */
    public static void callback_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(callback_ctx$LAYOUT, callback_ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout run_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("run_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *run_ctx
     * }
     */
    public static final AddressLayout run_ctx$layout() {
        return run_ctx$LAYOUT;
    }

    private static final long run_ctx$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *run_ctx
     * }
     */
    public static final long run_ctx$offset() {
        return run_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *run_ctx
     * }
     */
    public static MemorySegment run_ctx(MemorySegment struct) {
        return struct.get(run_ctx$LAYOUT, run_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *run_ctx
     * }
     */
    public static void run_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(run_ctx$LAYOUT, run_ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout ctx_free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ctx_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t ctx_free
     * }
     */
    public static final AddressLayout ctx_free$layout() {
        return ctx_free$LAYOUT;
    }

    private static final long ctx_free$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t ctx_free
     * }
     */
    public static final long ctx_free$offset() {
        return ctx_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t ctx_free
     * }
     */
    public static MemorySegment ctx_free(MemorySegment struct) {
        return struct.get(ctx_free$LAYOUT, ctx_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t ctx_free
     * }
     */
    public static void ctx_free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ctx_free$LAYOUT, ctx_free$OFFSET, fieldValue);
    }

    private static final AddressLayout callback_ctx_free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback_ctx_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t callback_ctx_free
     * }
     */
    public static final AddressLayout callback_ctx_free$layout() {
        return callback_ctx_free$LAYOUT;
    }

    private static final long callback_ctx_free$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t callback_ctx_free
     * }
     */
    public static final long callback_ctx_free$offset() {
        return callback_ctx_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t callback_ctx_free
     * }
     */
    public static MemorySegment callback_ctx_free(MemorySegment struct) {
        return struct.get(callback_ctx_free$LAYOUT, callback_ctx_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t callback_ctx_free
     * }
     */
    public static void callback_ctx_free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(callback_ctx_free$LAYOUT, callback_ctx_free$OFFSET, fieldValue);
    }

    private static final AddressLayout run_ctx_free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("run_ctx_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t run_ctx_free
     * }
     */
    public static final AddressLayout run_ctx_free$layout() {
        return run_ctx_free$LAYOUT;
    }

    private static final long run_ctx_free$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t run_ctx_free
     * }
     */
    public static final long run_ctx_free$offset() {
        return run_ctx_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t run_ctx_free
     * }
     */
    public static MemorySegment run_ctx_free(MemorySegment struct) {
        return struct.get(run_ctx_free$LAYOUT, run_ctx_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t run_ctx_free
     * }
     */
    public static void run_ctx_free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(run_ctx_free$LAYOUT, run_ctx_free$OFFSET, fieldValue);
    }

    private static final AddressLayout observable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("observable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_observable_t *observable
     * }
     */
    public static final AddressLayout observable$layout() {
        return observable$LAYOUT;
    }

    private static final long observable$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_observable_t *observable
     * }
     */
    public static final long observable$offset() {
        return observable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_observable_t *observable
     * }
     */
    public static MemorySegment observable(MemorySegment struct) {
        return struct.get(observable$LAYOUT, observable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_observable_t *observable
     * }
     */
    public static void observable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(observable$LAYOUT, observable$OFFSET, fieldValue);
    }

    private static final AddressLayout world$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("world"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_world_t *world
     * }
     */
    public static final AddressLayout world$layout() {
        return world$LAYOUT;
    }

    private static final long world$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_world_t *world
     * }
     */
    public static final long world$offset() {
        return world$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_world_t *world
     * }
     */
    public static MemorySegment world(MemorySegment struct) {
        return struct.get(world$LAYOUT, world$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_world_t *world
     * }
     */
    public static void world(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(world$LAYOUT, world$OFFSET, fieldValue);
    }

    private static final OfLong entity$LAYOUT = (OfLong)$LAYOUT.select(groupElement("entity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static final OfLong entity$layout() {
        return entity$LAYOUT;
    }

    private static final long entity$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static final long entity$offset() {
        return entity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static long entity(MemorySegment struct) {
        return struct.get(entity$LAYOUT, entity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static void entity(MemorySegment struct, long fieldValue) {
        struct.set(entity$LAYOUT, entity$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

