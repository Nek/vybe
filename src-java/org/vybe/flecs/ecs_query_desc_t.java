// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_query_desc_t {
 *     int32_t _canary;
 *     ecs_term_t terms[16];
 *     const char *expr;
 *     ecs_query_cache_kind_t cache_kind;
 *     ecs_flags32_t flags;
 *     ecs_order_by_action_t order_by_callback;
 *     ecs_sort_table_action_t order_by_table_callback;
 *     ecs_entity_t order_by;
 *     ecs_id_t group_by;
 *     ecs_group_by_action_t group_by_callback;
 *     ecs_group_create_action_t on_group_create;
 *     ecs_group_delete_action_t on_group_delete;
 *     void *group_by_ctx;
 *     ecs_ctx_free_t group_by_ctx_free;
 *     void *ctx;
 *     void *binding_ctx;
 *     ecs_ctx_free_t ctx_free;
 *     ecs_ctx_free_t binding_ctx_free;
 *     ecs_entity_t entity;
 * }
 * }
 */
public class ecs_query_desc_t {

    ecs_query_desc_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_INT.withName("_canary"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(16, ecs_term_t.layout()).withName("terms"),
        flecs.C_POINTER.withName("expr"),
        flecs.C_INT.withName("cache_kind"),
        flecs.C_INT.withName("flags"),
        flecs.C_POINTER.withName("order_by_callback"),
        flecs.C_POINTER.withName("order_by_table_callback"),
        flecs.C_LONG_LONG.withName("order_by"),
        flecs.C_LONG_LONG.withName("group_by"),
        flecs.C_POINTER.withName("group_by_callback"),
        flecs.C_POINTER.withName("on_group_create"),
        flecs.C_POINTER.withName("on_group_delete"),
        flecs.C_POINTER.withName("group_by_ctx"),
        flecs.C_POINTER.withName("group_by_ctx_free"),
        flecs.C_POINTER.withName("ctx"),
        flecs.C_POINTER.withName("binding_ctx"),
        flecs.C_POINTER.withName("ctx_free"),
        flecs.C_POINTER.withName("binding_ctx_free"),
        flecs.C_LONG_LONG.withName("entity")
    ).withName("ecs_query_desc_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt _canary$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_canary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static final OfInt _canary$layout() {
        return _canary$LAYOUT;
    }

    private static final long _canary$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static final long _canary$offset() {
        return _canary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static int _canary(MemorySegment struct) {
        return struct.get(_canary$LAYOUT, _canary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static void _canary(MemorySegment struct, int fieldValue) {
        struct.set(_canary$LAYOUT, _canary$OFFSET, fieldValue);
    }

    private static final SequenceLayout terms$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("terms"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_term_t terms[16]
     * }
     */
    public static final SequenceLayout terms$layout() {
        return terms$LAYOUT;
    }

    private static final long terms$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_term_t terms[16]
     * }
     */
    public static final long terms$offset() {
        return terms$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_term_t terms[16]
     * }
     */
    public static MemorySegment terms(MemorySegment struct) {
        return struct.asSlice(terms$OFFSET, terms$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_term_t terms[16]
     * }
     */
    public static void terms(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, terms$OFFSET, terms$LAYOUT.byteSize());
    }

    private static long[] terms$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ecs_term_t terms[16]
     * }
     */
    public static long[] terms$dimensions() {
        return terms$DIMS;
    }
    private static final MethodHandle terms$ELEM_HANDLE = terms$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ecs_term_t terms[16]
     * }
     */
    public static MemorySegment terms(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)terms$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ecs_term_t terms[16]
     * }
     */
    public static void terms(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, terms(struct, index0), 0L, ecs_term_t.layout().byteSize());
    }

    private static final AddressLayout expr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("expr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *expr
     * }
     */
    public static final AddressLayout expr$layout() {
        return expr$LAYOUT;
    }

    private static final long expr$OFFSET = 1160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *expr
     * }
     */
    public static final long expr$offset() {
        return expr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *expr
     * }
     */
    public static MemorySegment expr(MemorySegment struct) {
        return struct.get(expr$LAYOUT, expr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *expr
     * }
     */
    public static void expr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(expr$LAYOUT, expr$OFFSET, fieldValue);
    }

    private static final OfInt cache_kind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cache_kind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_query_cache_kind_t cache_kind
     * }
     */
    public static final OfInt cache_kind$layout() {
        return cache_kind$LAYOUT;
    }

    private static final long cache_kind$OFFSET = 1168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_query_cache_kind_t cache_kind
     * }
     */
    public static final long cache_kind$offset() {
        return cache_kind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_query_cache_kind_t cache_kind
     * }
     */
    public static int cache_kind(MemorySegment struct) {
        return struct.get(cache_kind$LAYOUT, cache_kind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_query_cache_kind_t cache_kind
     * }
     */
    public static void cache_kind(MemorySegment struct, int fieldValue) {
        struct.set(cache_kind$LAYOUT, cache_kind$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 1172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final AddressLayout order_by_callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("order_by_callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_order_by_action_t order_by_callback
     * }
     */
    public static final AddressLayout order_by_callback$layout() {
        return order_by_callback$LAYOUT;
    }

    private static final long order_by_callback$OFFSET = 1176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_order_by_action_t order_by_callback
     * }
     */
    public static final long order_by_callback$offset() {
        return order_by_callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_order_by_action_t order_by_callback
     * }
     */
    public static MemorySegment order_by_callback(MemorySegment struct) {
        return struct.get(order_by_callback$LAYOUT, order_by_callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_order_by_action_t order_by_callback
     * }
     */
    public static void order_by_callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(order_by_callback$LAYOUT, order_by_callback$OFFSET, fieldValue);
    }

    private static final AddressLayout order_by_table_callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("order_by_table_callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_sort_table_action_t order_by_table_callback
     * }
     */
    public static final AddressLayout order_by_table_callback$layout() {
        return order_by_table_callback$LAYOUT;
    }

    private static final long order_by_table_callback$OFFSET = 1184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_sort_table_action_t order_by_table_callback
     * }
     */
    public static final long order_by_table_callback$offset() {
        return order_by_table_callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_sort_table_action_t order_by_table_callback
     * }
     */
    public static MemorySegment order_by_table_callback(MemorySegment struct) {
        return struct.get(order_by_table_callback$LAYOUT, order_by_table_callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_sort_table_action_t order_by_table_callback
     * }
     */
    public static void order_by_table_callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(order_by_table_callback$LAYOUT, order_by_table_callback$OFFSET, fieldValue);
    }

    private static final OfLong order_by$LAYOUT = (OfLong)$LAYOUT.select(groupElement("order_by"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t order_by
     * }
     */
    public static final OfLong order_by$layout() {
        return order_by$LAYOUT;
    }

    private static final long order_by$OFFSET = 1192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t order_by
     * }
     */
    public static final long order_by$offset() {
        return order_by$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t order_by
     * }
     */
    public static long order_by(MemorySegment struct) {
        return struct.get(order_by$LAYOUT, order_by$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t order_by
     * }
     */
    public static void order_by(MemorySegment struct, long fieldValue) {
        struct.set(order_by$LAYOUT, order_by$OFFSET, fieldValue);
    }

    private static final OfLong group_by$LAYOUT = (OfLong)$LAYOUT.select(groupElement("group_by"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_id_t group_by
     * }
     */
    public static final OfLong group_by$layout() {
        return group_by$LAYOUT;
    }

    private static final long group_by$OFFSET = 1200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_id_t group_by
     * }
     */
    public static final long group_by$offset() {
        return group_by$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_id_t group_by
     * }
     */
    public static long group_by(MemorySegment struct) {
        return struct.get(group_by$LAYOUT, group_by$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_id_t group_by
     * }
     */
    public static void group_by(MemorySegment struct, long fieldValue) {
        struct.set(group_by$LAYOUT, group_by$OFFSET, fieldValue);
    }

    private static final AddressLayout group_by_callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("group_by_callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_group_by_action_t group_by_callback
     * }
     */
    public static final AddressLayout group_by_callback$layout() {
        return group_by_callback$LAYOUT;
    }

    private static final long group_by_callback$OFFSET = 1208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_group_by_action_t group_by_callback
     * }
     */
    public static final long group_by_callback$offset() {
        return group_by_callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_group_by_action_t group_by_callback
     * }
     */
    public static MemorySegment group_by_callback(MemorySegment struct) {
        return struct.get(group_by_callback$LAYOUT, group_by_callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_group_by_action_t group_by_callback
     * }
     */
    public static void group_by_callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(group_by_callback$LAYOUT, group_by_callback$OFFSET, fieldValue);
    }

    private static final AddressLayout on_group_create$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("on_group_create"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_group_create_action_t on_group_create
     * }
     */
    public static final AddressLayout on_group_create$layout() {
        return on_group_create$LAYOUT;
    }

    private static final long on_group_create$OFFSET = 1216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_group_create_action_t on_group_create
     * }
     */
    public static final long on_group_create$offset() {
        return on_group_create$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_group_create_action_t on_group_create
     * }
     */
    public static MemorySegment on_group_create(MemorySegment struct) {
        return struct.get(on_group_create$LAYOUT, on_group_create$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_group_create_action_t on_group_create
     * }
     */
    public static void on_group_create(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(on_group_create$LAYOUT, on_group_create$OFFSET, fieldValue);
    }

    private static final AddressLayout on_group_delete$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("on_group_delete"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_group_delete_action_t on_group_delete
     * }
     */
    public static final AddressLayout on_group_delete$layout() {
        return on_group_delete$LAYOUT;
    }

    private static final long on_group_delete$OFFSET = 1224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_group_delete_action_t on_group_delete
     * }
     */
    public static final long on_group_delete$offset() {
        return on_group_delete$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_group_delete_action_t on_group_delete
     * }
     */
    public static MemorySegment on_group_delete(MemorySegment struct) {
        return struct.get(on_group_delete$LAYOUT, on_group_delete$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_group_delete_action_t on_group_delete
     * }
     */
    public static void on_group_delete(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(on_group_delete$LAYOUT, on_group_delete$OFFSET, fieldValue);
    }

    private static final AddressLayout group_by_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("group_by_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *group_by_ctx
     * }
     */
    public static final AddressLayout group_by_ctx$layout() {
        return group_by_ctx$LAYOUT;
    }

    private static final long group_by_ctx$OFFSET = 1232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *group_by_ctx
     * }
     */
    public static final long group_by_ctx$offset() {
        return group_by_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *group_by_ctx
     * }
     */
    public static MemorySegment group_by_ctx(MemorySegment struct) {
        return struct.get(group_by_ctx$LAYOUT, group_by_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *group_by_ctx
     * }
     */
    public static void group_by_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(group_by_ctx$LAYOUT, group_by_ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout group_by_ctx_free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("group_by_ctx_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t group_by_ctx_free
     * }
     */
    public static final AddressLayout group_by_ctx_free$layout() {
        return group_by_ctx_free$LAYOUT;
    }

    private static final long group_by_ctx_free$OFFSET = 1240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t group_by_ctx_free
     * }
     */
    public static final long group_by_ctx_free$offset() {
        return group_by_ctx_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t group_by_ctx_free
     * }
     */
    public static MemorySegment group_by_ctx_free(MemorySegment struct) {
        return struct.get(group_by_ctx_free$LAYOUT, group_by_ctx_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t group_by_ctx_free
     * }
     */
    public static void group_by_ctx_free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(group_by_ctx_free$LAYOUT, group_by_ctx_free$OFFSET, fieldValue);
    }

    private static final AddressLayout ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static final AddressLayout ctx$layout() {
        return ctx$LAYOUT;
    }

    private static final long ctx$OFFSET = 1248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static final long ctx$offset() {
        return ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static MemorySegment ctx(MemorySegment struct) {
        return struct.get(ctx$LAYOUT, ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static void ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ctx$LAYOUT, ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout binding_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("binding_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *binding_ctx
     * }
     */
    public static final AddressLayout binding_ctx$layout() {
        return binding_ctx$LAYOUT;
    }

    private static final long binding_ctx$OFFSET = 1256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *binding_ctx
     * }
     */
    public static final long binding_ctx$offset() {
        return binding_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *binding_ctx
     * }
     */
    public static MemorySegment binding_ctx(MemorySegment struct) {
        return struct.get(binding_ctx$LAYOUT, binding_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *binding_ctx
     * }
     */
    public static void binding_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(binding_ctx$LAYOUT, binding_ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout ctx_free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ctx_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t ctx_free
     * }
     */
    public static final AddressLayout ctx_free$layout() {
        return ctx_free$LAYOUT;
    }

    private static final long ctx_free$OFFSET = 1264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t ctx_free
     * }
     */
    public static final long ctx_free$offset() {
        return ctx_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t ctx_free
     * }
     */
    public static MemorySegment ctx_free(MemorySegment struct) {
        return struct.get(ctx_free$LAYOUT, ctx_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t ctx_free
     * }
     */
    public static void ctx_free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ctx_free$LAYOUT, ctx_free$OFFSET, fieldValue);
    }

    private static final AddressLayout binding_ctx_free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("binding_ctx_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t binding_ctx_free
     * }
     */
    public static final AddressLayout binding_ctx_free$layout() {
        return binding_ctx_free$LAYOUT;
    }

    private static final long binding_ctx_free$OFFSET = 1272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t binding_ctx_free
     * }
     */
    public static final long binding_ctx_free$offset() {
        return binding_ctx_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t binding_ctx_free
     * }
     */
    public static MemorySegment binding_ctx_free(MemorySegment struct) {
        return struct.get(binding_ctx_free$LAYOUT, binding_ctx_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t binding_ctx_free
     * }
     */
    public static void binding_ctx_free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(binding_ctx_free$LAYOUT, binding_ctx_free$OFFSET, fieldValue);
    }

    private static final OfLong entity$LAYOUT = (OfLong)$LAYOUT.select(groupElement("entity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static final OfLong entity$layout() {
        return entity$LAYOUT;
    }

    private static final long entity$OFFSET = 1280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static final long entity$offset() {
        return entity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static long entity(MemorySegment struct) {
        return struct.get(entity$LAYOUT, entity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static void entity(MemorySegment struct, long fieldValue) {
        struct.set(entity$LAYOUT, entity$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

