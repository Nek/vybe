// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_sparse_t {
 *     ecs_vec_t dense;
 *     ecs_vec_t pages;
 *     ecs_size_t size;
 *     int32_t count;
 *     uint64_t max_id;
 *     struct ecs_allocator_t *allocator;
 *     struct ecs_block_allocator_t *page_allocator;
 * }
 * }
 */
public class ecs_sparse_t {

    ecs_sparse_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ecs_vec_t.layout().withName("dense"),
        ecs_vec_t.layout().withName("pages"),
        flecs.C_INT.withName("size"),
        flecs.C_INT.withName("count"),
        flecs.C_LONG_LONG.withName("max_id"),
        flecs.C_POINTER.withName("allocator"),
        flecs.C_POINTER.withName("page_allocator")
    ).withName("ecs_sparse_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout dense$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("dense"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_vec_t dense
     * }
     */
    public static final GroupLayout dense$layout() {
        return dense$LAYOUT;
    }

    private static final long dense$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_vec_t dense
     * }
     */
    public static final long dense$offset() {
        return dense$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_vec_t dense
     * }
     */
    public static MemorySegment dense(MemorySegment struct) {
        return struct.asSlice(dense$OFFSET, dense$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_vec_t dense
     * }
     */
    public static void dense(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dense$OFFSET, dense$LAYOUT.byteSize());
    }

    private static final GroupLayout pages$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_vec_t pages
     * }
     */
    public static final GroupLayout pages$layout() {
        return pages$LAYOUT;
    }

    private static final long pages$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_vec_t pages
     * }
     */
    public static final long pages$offset() {
        return pages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_vec_t pages
     * }
     */
    public static MemorySegment pages(MemorySegment struct) {
        return struct.asSlice(pages$OFFSET, pages$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_vec_t pages
     * }
     */
    public static void pages(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pages$OFFSET, pages$LAYOUT.byteSize());
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_size_t size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_size_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_size_t size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_size_t size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static final OfInt count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static int count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static void count(MemorySegment struct, int fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    private static final OfLong max_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("max_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t max_id
     * }
     */
    public static final OfLong max_id$layout() {
        return max_id$LAYOUT;
    }

    private static final long max_id$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t max_id
     * }
     */
    public static final long max_id$offset() {
        return max_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t max_id
     * }
     */
    public static long max_id(MemorySegment struct) {
        return struct.get(max_id$LAYOUT, max_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t max_id
     * }
     */
    public static void max_id(MemorySegment struct, long fieldValue) {
        struct.set(max_id$LAYOUT, max_id$OFFSET, fieldValue);
    }

    private static final AddressLayout allocator$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("allocator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ecs_allocator_t *allocator
     * }
     */
    public static final AddressLayout allocator$layout() {
        return allocator$LAYOUT;
    }

    private static final long allocator$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ecs_allocator_t *allocator
     * }
     */
    public static final long allocator$offset() {
        return allocator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ecs_allocator_t *allocator
     * }
     */
    public static MemorySegment allocator(MemorySegment struct) {
        return struct.get(allocator$LAYOUT, allocator$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ecs_allocator_t *allocator
     * }
     */
    public static void allocator(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(allocator$LAYOUT, allocator$OFFSET, fieldValue);
    }

    private static final AddressLayout page_allocator$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("page_allocator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ecs_block_allocator_t *page_allocator
     * }
     */
    public static final AddressLayout page_allocator$layout() {
        return page_allocator$LAYOUT;
    }

    private static final long page_allocator$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ecs_block_allocator_t *page_allocator
     * }
     */
    public static final long page_allocator$offset() {
        return page_allocator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ecs_block_allocator_t *page_allocator
     * }
     */
    public static MemorySegment page_allocator(MemorySegment struct) {
        return struct.get(page_allocator$LAYOUT, page_allocator$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ecs_block_allocator_t *page_allocator
     * }
     */
    public static void page_allocator(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(page_allocator$LAYOUT, page_allocator$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

