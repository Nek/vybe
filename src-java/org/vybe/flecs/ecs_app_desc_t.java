// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_app_desc_t {
 *     float target_fps;
 *     float delta_time;
 *     int32_t threads;
 *     int32_t frames;
 *     bool enable_rest;
 *     bool enable_monitor;
 *     uint16_t port;
 *     ecs_app_init_action_t init;
 *     void *ctx;
 * }
 * }
 */
public class ecs_app_desc_t {

    ecs_app_desc_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_FLOAT.withName("target_fps"),
        flecs.C_FLOAT.withName("delta_time"),
        flecs.C_INT.withName("threads"),
        flecs.C_INT.withName("frames"),
        flecs.C_BOOL.withName("enable_rest"),
        flecs.C_BOOL.withName("enable_monitor"),
        flecs.C_SHORT.withName("port"),
        MemoryLayout.paddingLayout(4),
        flecs.C_POINTER.withName("init"),
        flecs.C_POINTER.withName("ctx")
    ).withName("ecs_app_desc_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat target_fps$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("target_fps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float target_fps
     * }
     */
    public static final OfFloat target_fps$layout() {
        return target_fps$LAYOUT;
    }

    private static final long target_fps$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float target_fps
     * }
     */
    public static final long target_fps$offset() {
        return target_fps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float target_fps
     * }
     */
    public static float target_fps(MemorySegment struct) {
        return struct.get(target_fps$LAYOUT, target_fps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float target_fps
     * }
     */
    public static void target_fps(MemorySegment struct, float fieldValue) {
        struct.set(target_fps$LAYOUT, target_fps$OFFSET, fieldValue);
    }

    private static final OfFloat delta_time$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("delta_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float delta_time
     * }
     */
    public static final OfFloat delta_time$layout() {
        return delta_time$LAYOUT;
    }

    private static final long delta_time$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float delta_time
     * }
     */
    public static final long delta_time$offset() {
        return delta_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float delta_time
     * }
     */
    public static float delta_time(MemorySegment struct) {
        return struct.get(delta_time$LAYOUT, delta_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float delta_time
     * }
     */
    public static void delta_time(MemorySegment struct, float fieldValue) {
        struct.set(delta_time$LAYOUT, delta_time$OFFSET, fieldValue);
    }

    private static final OfInt threads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("threads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t threads
     * }
     */
    public static final OfInt threads$layout() {
        return threads$LAYOUT;
    }

    private static final long threads$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t threads
     * }
     */
    public static final long threads$offset() {
        return threads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t threads
     * }
     */
    public static int threads(MemorySegment struct) {
        return struct.get(threads$LAYOUT, threads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t threads
     * }
     */
    public static void threads(MemorySegment struct, int fieldValue) {
        struct.set(threads$LAYOUT, threads$OFFSET, fieldValue);
    }

    private static final OfInt frames$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t frames
     * }
     */
    public static final OfInt frames$layout() {
        return frames$LAYOUT;
    }

    private static final long frames$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t frames
     * }
     */
    public static final long frames$offset() {
        return frames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t frames
     * }
     */
    public static int frames(MemorySegment struct) {
        return struct.get(frames$LAYOUT, frames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t frames
     * }
     */
    public static void frames(MemorySegment struct, int fieldValue) {
        struct.set(frames$LAYOUT, frames$OFFSET, fieldValue);
    }

    private static final OfBoolean enable_rest$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("enable_rest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool enable_rest
     * }
     */
    public static final OfBoolean enable_rest$layout() {
        return enable_rest$LAYOUT;
    }

    private static final long enable_rest$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool enable_rest
     * }
     */
    public static final long enable_rest$offset() {
        return enable_rest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool enable_rest
     * }
     */
    public static boolean enable_rest(MemorySegment struct) {
        return struct.get(enable_rest$LAYOUT, enable_rest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool enable_rest
     * }
     */
    public static void enable_rest(MemorySegment struct, boolean fieldValue) {
        struct.set(enable_rest$LAYOUT, enable_rest$OFFSET, fieldValue);
    }

    private static final OfBoolean enable_monitor$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("enable_monitor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool enable_monitor
     * }
     */
    public static final OfBoolean enable_monitor$layout() {
        return enable_monitor$LAYOUT;
    }

    private static final long enable_monitor$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool enable_monitor
     * }
     */
    public static final long enable_monitor$offset() {
        return enable_monitor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool enable_monitor
     * }
     */
    public static boolean enable_monitor(MemorySegment struct) {
        return struct.get(enable_monitor$LAYOUT, enable_monitor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool enable_monitor
     * }
     */
    public static void enable_monitor(MemorySegment struct, boolean fieldValue) {
        struct.set(enable_monitor$LAYOUT, enable_monitor$OFFSET, fieldValue);
    }

    private static final OfShort port$LAYOUT = (OfShort)$LAYOUT.select(groupElement("port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t port
     * }
     */
    public static final OfShort port$layout() {
        return port$LAYOUT;
    }

    private static final long port$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t port
     * }
     */
    public static final long port$offset() {
        return port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t port
     * }
     */
    public static short port(MemorySegment struct) {
        return struct.get(port$LAYOUT, port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t port
     * }
     */
    public static void port(MemorySegment struct, short fieldValue) {
        struct.set(port$LAYOUT, port$OFFSET, fieldValue);
    }

    private static final AddressLayout init$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_app_init_action_t init
     * }
     */
    public static final AddressLayout init$layout() {
        return init$LAYOUT;
    }

    private static final long init$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_app_init_action_t init
     * }
     */
    public static final long init$offset() {
        return init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_app_init_action_t init
     * }
     */
    public static MemorySegment init(MemorySegment struct) {
        return struct.get(init$LAYOUT, init$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_app_init_action_t init
     * }
     */
    public static void init(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(init$LAYOUT, init$OFFSET, fieldValue);
    }

    private static final AddressLayout ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static final AddressLayout ctx$layout() {
        return ctx$LAYOUT;
    }

    private static final long ctx$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static final long ctx$offset() {
        return ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static MemorySegment ctx(MemorySegment struct) {
        return struct.get(ctx$LAYOUT, ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static void ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ctx$LAYOUT, ctx$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

