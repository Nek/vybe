// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_bulk_desc_t {
 *     int32_t _canary;
 *     ecs_entity_t *entities;
 *     int32_t count;
 *     ecs_id_t ids[32];
 *     void **data;
 *     ecs_table_t *table;
 * }
 * }
 */
public class ecs_bulk_desc_t {

    ecs_bulk_desc_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_INT.withName("_canary"),
        MemoryLayout.paddingLayout(4),
        flecs.C_POINTER.withName("entities"),
        flecs.C_INT.withName("count"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(32, flecs.C_LONG_LONG).withName("ids"),
        flecs.C_POINTER.withName("data"),
        flecs.C_POINTER.withName("table")
    ).withName("ecs_bulk_desc_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt _canary$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_canary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static final OfInt _canary$layout() {
        return _canary$LAYOUT;
    }

    private static final long _canary$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static final long _canary$offset() {
        return _canary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static int _canary(MemorySegment struct) {
        return struct.get(_canary$LAYOUT, _canary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static void _canary(MemorySegment struct, int fieldValue) {
        struct.set(_canary$LAYOUT, _canary$OFFSET, fieldValue);
    }

    private static final AddressLayout entities$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("entities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t *entities
     * }
     */
    public static final AddressLayout entities$layout() {
        return entities$LAYOUT;
    }

    private static final long entities$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t *entities
     * }
     */
    public static final long entities$offset() {
        return entities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t *entities
     * }
     */
    public static MemorySegment entities(MemorySegment struct) {
        return struct.get(entities$LAYOUT, entities$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t *entities
     * }
     */
    public static void entities(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(entities$LAYOUT, entities$OFFSET, fieldValue);
    }

    private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static final OfInt count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static int count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static void count(MemorySegment struct, int fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    private static final SequenceLayout ids$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ids"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_id_t ids[32]
     * }
     */
    public static final SequenceLayout ids$layout() {
        return ids$LAYOUT;
    }

    private static final long ids$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_id_t ids[32]
     * }
     */
    public static final long ids$offset() {
        return ids$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_id_t ids[32]
     * }
     */
    public static MemorySegment ids(MemorySegment struct) {
        return struct.asSlice(ids$OFFSET, ids$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_id_t ids[32]
     * }
     */
    public static void ids(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ids$OFFSET, ids$LAYOUT.byteSize());
    }

    private static long[] ids$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ecs_id_t ids[32]
     * }
     */
    public static long[] ids$dimensions() {
        return ids$DIMS;
    }
    private static final VarHandle ids$ELEM_HANDLE = ids$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ecs_id_t ids[32]
     * }
     */
    public static long ids(MemorySegment struct, long index0) {
        return (long)ids$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ecs_id_t ids[32]
     * }
     */
    public static void ids(MemorySegment struct, long index0, long fieldValue) {
        ids$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void **data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void **data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void **data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void **data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    private static final AddressLayout table$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_table_t *table
     * }
     */
    public static final AddressLayout table$layout() {
        return table$LAYOUT;
    }

    private static final long table$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_table_t *table
     * }
     */
    public static final long table$offset() {
        return table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_table_t *table
     * }
     */
    public static MemorySegment table(MemorySegment struct) {
        return struct.get(table$LAYOUT, table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_table_t *table
     * }
     */
    public static void table(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(table$LAYOUT, table$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

