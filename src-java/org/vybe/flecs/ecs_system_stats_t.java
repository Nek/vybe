// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_system_stats_t {
 *     int64_t first_;
 *     ecs_metric_t time_spent;
 *     int64_t last_;
 *     bool task;
 *     ecs_query_stats_t query;
 * }
 * }
 */
public class ecs_system_stats_t {

    ecs_system_stats_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_LONG_LONG.withName("first_"),
        ecs_metric_t.layout().withName("time_spent"),
        flecs.C_LONG_LONG.withName("last_"),
        flecs.C_BOOL.withName("task"),
        MemoryLayout.paddingLayout(7),
        ecs_query_stats_t.layout().withName("query")
    ).withName("ecs_system_stats_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong first_$LAYOUT = (OfLong)$LAYOUT.select(groupElement("first_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t first_
     * }
     */
    public static final OfLong first_$layout() {
        return first_$LAYOUT;
    }

    private static final long first_$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t first_
     * }
     */
    public static final long first_$offset() {
        return first_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t first_
     * }
     */
    public static long first_(MemorySegment struct) {
        return struct.get(first_$LAYOUT, first_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t first_
     * }
     */
    public static void first_(MemorySegment struct, long fieldValue) {
        struct.set(first_$LAYOUT, first_$OFFSET, fieldValue);
    }

    private static final GroupLayout time_spent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("time_spent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_metric_t time_spent
     * }
     */
    public static final GroupLayout time_spent$layout() {
        return time_spent$LAYOUT;
    }

    private static final long time_spent$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_metric_t time_spent
     * }
     */
    public static final long time_spent$offset() {
        return time_spent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_metric_t time_spent
     * }
     */
    public static MemorySegment time_spent(MemorySegment struct) {
        return struct.asSlice(time_spent$OFFSET, time_spent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_metric_t time_spent
     * }
     */
    public static void time_spent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, time_spent$OFFSET, time_spent$LAYOUT.byteSize());
    }

    private static final OfLong last_$LAYOUT = (OfLong)$LAYOUT.select(groupElement("last_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t last_
     * }
     */
    public static final OfLong last_$layout() {
        return last_$LAYOUT;
    }

    private static final long last_$OFFSET = 1208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t last_
     * }
     */
    public static final long last_$offset() {
        return last_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t last_
     * }
     */
    public static long last_(MemorySegment struct) {
        return struct.get(last_$LAYOUT, last_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t last_
     * }
     */
    public static void last_(MemorySegment struct, long fieldValue) {
        struct.set(last_$LAYOUT, last_$OFFSET, fieldValue);
    }

    private static final OfBoolean task$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("task"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool task
     * }
     */
    public static final OfBoolean task$layout() {
        return task$LAYOUT;
    }

    private static final long task$OFFSET = 1216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool task
     * }
     */
    public static final long task$offset() {
        return task$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool task
     * }
     */
    public static boolean task(MemorySegment struct) {
        return struct.get(task$LAYOUT, task$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool task
     * }
     */
    public static void task(MemorySegment struct, boolean fieldValue) {
        struct.set(task$LAYOUT, task$OFFSET, fieldValue);
    }

    private static final GroupLayout query$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("query"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_query_stats_t query
     * }
     */
    public static final GroupLayout query$layout() {
        return query$LAYOUT;
    }

    private static final long query$OFFSET = 1224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_query_stats_t query
     * }
     */
    public static final long query$offset() {
        return query$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_query_stats_t query
     * }
     */
    public static MemorySegment query(MemorySegment struct) {
        return struct.asSlice(query$OFFSET, query$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_query_stats_t query
     * }
     */
    public static void query(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, query$OFFSET, query$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

