// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_meta_cursor_t {
 *     const ecs_world_t *world;
 *     ecs_meta_scope_t scope[32];
 *     int32_t depth;
 *     bool valid;
 *     bool is_primitive_scope;
 *     ecs_entity_t (*lookup_action)(const ecs_world_t *, const char *, void *);
 *     void *lookup_ctx;
 * }
 * }
 */
public class ecs_meta_cursor_t {

    ecs_meta_cursor_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_POINTER.withName("world"),
        MemoryLayout.sequenceLayout(32, ecs_meta_scope_t.layout()).withName("scope"),
        flecs.C_INT.withName("depth"),
        flecs.C_BOOL.withName("valid"),
        flecs.C_BOOL.withName("is_primitive_scope"),
        MemoryLayout.paddingLayout(2),
        flecs.C_POINTER.withName("lookup_action"),
        flecs.C_POINTER.withName("lookup_ctx")
    ).withName("ecs_meta_cursor_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout world$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("world"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ecs_world_t *world
     * }
     */
    public static final AddressLayout world$layout() {
        return world$LAYOUT;
    }

    private static final long world$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ecs_world_t *world
     * }
     */
    public static final long world$offset() {
        return world$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ecs_world_t *world
     * }
     */
    public static MemorySegment world(MemorySegment struct) {
        return struct.get(world$LAYOUT, world$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ecs_world_t *world
     * }
     */
    public static void world(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(world$LAYOUT, world$OFFSET, fieldValue);
    }

    private static final SequenceLayout scope$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("scope"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_meta_scope_t scope[32]
     * }
     */
    public static final SequenceLayout scope$layout() {
        return scope$LAYOUT;
    }

    private static final long scope$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_meta_scope_t scope[32]
     * }
     */
    public static final long scope$offset() {
        return scope$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_meta_scope_t scope[32]
     * }
     */
    public static MemorySegment scope(MemorySegment struct) {
        return struct.asSlice(scope$OFFSET, scope$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_meta_scope_t scope[32]
     * }
     */
    public static void scope(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, scope$OFFSET, scope$LAYOUT.byteSize());
    }

    private static long[] scope$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ecs_meta_scope_t scope[32]
     * }
     */
    public static long[] scope$dimensions() {
        return scope$DIMS;
    }
    private static final MethodHandle scope$ELEM_HANDLE = scope$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ecs_meta_scope_t scope[32]
     * }
     */
    public static MemorySegment scope(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)scope$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ecs_meta_scope_t scope[32]
     * }
     */
    public static void scope(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, scope(struct, index0), 0L, ecs_meta_scope_t.layout().byteSize());
    }

    private static final OfInt depth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t depth
     * }
     */
    public static final OfInt depth$layout() {
        return depth$LAYOUT;
    }

    private static final long depth$OFFSET = 2568;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t depth
     * }
     */
    public static final long depth$offset() {
        return depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t depth
     * }
     */
    public static int depth(MemorySegment struct) {
        return struct.get(depth$LAYOUT, depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t depth
     * }
     */
    public static void depth(MemorySegment struct, int fieldValue) {
        struct.set(depth$LAYOUT, depth$OFFSET, fieldValue);
    }

    private static final OfBoolean valid$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("valid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool valid
     * }
     */
    public static final OfBoolean valid$layout() {
        return valid$LAYOUT;
    }

    private static final long valid$OFFSET = 2572;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool valid
     * }
     */
    public static final long valid$offset() {
        return valid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool valid
     * }
     */
    public static boolean valid(MemorySegment struct) {
        return struct.get(valid$LAYOUT, valid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool valid
     * }
     */
    public static void valid(MemorySegment struct, boolean fieldValue) {
        struct.set(valid$LAYOUT, valid$OFFSET, fieldValue);
    }

    private static final OfBoolean is_primitive_scope$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_primitive_scope"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_primitive_scope
     * }
     */
    public static final OfBoolean is_primitive_scope$layout() {
        return is_primitive_scope$LAYOUT;
    }

    private static final long is_primitive_scope$OFFSET = 2573;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_primitive_scope
     * }
     */
    public static final long is_primitive_scope$offset() {
        return is_primitive_scope$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_primitive_scope
     * }
     */
    public static boolean is_primitive_scope(MemorySegment struct) {
        return struct.get(is_primitive_scope$LAYOUT, is_primitive_scope$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_primitive_scope
     * }
     */
    public static void is_primitive_scope(MemorySegment struct, boolean fieldValue) {
        struct.set(is_primitive_scope$LAYOUT, is_primitive_scope$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ecs_entity_t (*lookup_action)(const ecs_world_t *, const char *, void *)
     * }
     */
    public static class lookup_action {

        lookup_action() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            flecs.C_LONG_LONG,
            flecs.C_POINTER,
            flecs.C_POINTER,
            flecs.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(lookup_action.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_action.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_action$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_action"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t (*lookup_action)(const ecs_world_t *, const char *, void *)
     * }
     */
    public static final AddressLayout lookup_action$layout() {
        return lookup_action$LAYOUT;
    }

    private static final long lookup_action$OFFSET = 2576;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t (*lookup_action)(const ecs_world_t *, const char *, void *)
     * }
     */
    public static final long lookup_action$offset() {
        return lookup_action$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t (*lookup_action)(const ecs_world_t *, const char *, void *)
     * }
     */
    public static MemorySegment lookup_action(MemorySegment struct) {
        return struct.get(lookup_action$LAYOUT, lookup_action$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t (*lookup_action)(const ecs_world_t *, const char *, void *)
     * }
     */
    public static void lookup_action(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_action$LAYOUT, lookup_action$OFFSET, fieldValue);
    }

    private static final AddressLayout lookup_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *lookup_ctx
     * }
     */
    public static final AddressLayout lookup_ctx$layout() {
        return lookup_ctx$LAYOUT;
    }

    private static final long lookup_ctx$OFFSET = 2584;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *lookup_ctx
     * }
     */
    public static final long lookup_ctx$offset() {
        return lookup_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *lookup_ctx
     * }
     */
    public static MemorySegment lookup_ctx(MemorySegment struct) {
        return struct.get(lookup_ctx$LAYOUT, lookup_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *lookup_ctx
     * }
     */
    public static void lookup_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_ctx$LAYOUT, lookup_ctx$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

