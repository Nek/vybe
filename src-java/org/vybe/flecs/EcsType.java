// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct EcsType {
 *     ecs_type_kind_t kind;
 *     bool existing;
 *     bool partial;
 * }
 * }
 */
public class EcsType {

    EcsType() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_INT.withName("kind"),
        flecs.C_BOOL.withName("existing"),
        flecs.C_BOOL.withName("partial"),
        MemoryLayout.paddingLayout(2)
    ).withName("EcsType");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt kind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("kind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_type_kind_t kind
     * }
     */
    public static final OfInt kind$layout() {
        return kind$LAYOUT;
    }

    private static final long kind$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_type_kind_t kind
     * }
     */
    public static final long kind$offset() {
        return kind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_type_kind_t kind
     * }
     */
    public static int kind(MemorySegment struct) {
        return struct.get(kind$LAYOUT, kind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_type_kind_t kind
     * }
     */
    public static void kind(MemorySegment struct, int fieldValue) {
        struct.set(kind$LAYOUT, kind$OFFSET, fieldValue);
    }

    private static final OfBoolean existing$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("existing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool existing
     * }
     */
    public static final OfBoolean existing$layout() {
        return existing$LAYOUT;
    }

    private static final long existing$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool existing
     * }
     */
    public static final long existing$offset() {
        return existing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool existing
     * }
     */
    public static boolean existing(MemorySegment struct) {
        return struct.get(existing$LAYOUT, existing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool existing
     * }
     */
    public static void existing(MemorySegment struct, boolean fieldValue) {
        struct.set(existing$LAYOUT, existing$OFFSET, fieldValue);
    }

    private static final OfBoolean partial$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("partial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool partial
     * }
     */
    public static final OfBoolean partial$layout() {
        return partial$LAYOUT;
    }

    private static final long partial$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool partial
     * }
     */
    public static final long partial$offset() {
        return partial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool partial
     * }
     */
    public static boolean partial(MemorySegment struct) {
        return struct.get(partial$LAYOUT, partial$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool partial
     * }
     */
    public static void partial(MemorySegment struct, boolean fieldValue) {
        struct.set(partial$LAYOUT, partial$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

