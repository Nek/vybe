// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_metric_desc_t {
 *     int32_t _canary;
 *     ecs_entity_t entity;
 *     ecs_entity_t member;
 *     const char *dotmember;
 *     ecs_id_t id;
 *     bool targets;
 *     ecs_entity_t kind;
 *     const char *brief;
 * }
 * }
 */
public class ecs_metric_desc_t {

    ecs_metric_desc_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_INT.withName("_canary"),
        MemoryLayout.paddingLayout(4),
        flecs.C_LONG_LONG.withName("entity"),
        flecs.C_LONG_LONG.withName("member"),
        flecs.C_POINTER.withName("dotmember"),
        flecs.C_LONG_LONG.withName("id"),
        flecs.C_BOOL.withName("targets"),
        MemoryLayout.paddingLayout(7),
        flecs.C_LONG_LONG.withName("kind"),
        flecs.C_POINTER.withName("brief")
    ).withName("ecs_metric_desc_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt _canary$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_canary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static final OfInt _canary$layout() {
        return _canary$LAYOUT;
    }

    private static final long _canary$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static final long _canary$offset() {
        return _canary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static int _canary(MemorySegment struct) {
        return struct.get(_canary$LAYOUT, _canary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static void _canary(MemorySegment struct, int fieldValue) {
        struct.set(_canary$LAYOUT, _canary$OFFSET, fieldValue);
    }

    private static final OfLong entity$LAYOUT = (OfLong)$LAYOUT.select(groupElement("entity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static final OfLong entity$layout() {
        return entity$LAYOUT;
    }

    private static final long entity$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static final long entity$offset() {
        return entity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static long entity(MemorySegment struct) {
        return struct.get(entity$LAYOUT, entity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static void entity(MemorySegment struct, long fieldValue) {
        struct.set(entity$LAYOUT, entity$OFFSET, fieldValue);
    }

    private static final OfLong member$LAYOUT = (OfLong)$LAYOUT.select(groupElement("member"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t member
     * }
     */
    public static final OfLong member$layout() {
        return member$LAYOUT;
    }

    private static final long member$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t member
     * }
     */
    public static final long member$offset() {
        return member$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t member
     * }
     */
    public static long member(MemorySegment struct) {
        return struct.get(member$LAYOUT, member$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t member
     * }
     */
    public static void member(MemorySegment struct, long fieldValue) {
        struct.set(member$LAYOUT, member$OFFSET, fieldValue);
    }

    private static final AddressLayout dotmember$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dotmember"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *dotmember
     * }
     */
    public static final AddressLayout dotmember$layout() {
        return dotmember$LAYOUT;
    }

    private static final long dotmember$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *dotmember
     * }
     */
    public static final long dotmember$offset() {
        return dotmember$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *dotmember
     * }
     */
    public static MemorySegment dotmember(MemorySegment struct) {
        return struct.get(dotmember$LAYOUT, dotmember$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *dotmember
     * }
     */
    public static void dotmember(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dotmember$LAYOUT, dotmember$OFFSET, fieldValue);
    }

    private static final OfLong id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_id_t id
     * }
     */
    public static final OfLong id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_id_t id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_id_t id
     * }
     */
    public static long id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_id_t id
     * }
     */
    public static void id(MemorySegment struct, long fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final OfBoolean targets$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("targets"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool targets
     * }
     */
    public static final OfBoolean targets$layout() {
        return targets$LAYOUT;
    }

    private static final long targets$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool targets
     * }
     */
    public static final long targets$offset() {
        return targets$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool targets
     * }
     */
    public static boolean targets(MemorySegment struct) {
        return struct.get(targets$LAYOUT, targets$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool targets
     * }
     */
    public static void targets(MemorySegment struct, boolean fieldValue) {
        struct.set(targets$LAYOUT, targets$OFFSET, fieldValue);
    }

    private static final OfLong kind$LAYOUT = (OfLong)$LAYOUT.select(groupElement("kind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t kind
     * }
     */
    public static final OfLong kind$layout() {
        return kind$LAYOUT;
    }

    private static final long kind$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t kind
     * }
     */
    public static final long kind$offset() {
        return kind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t kind
     * }
     */
    public static long kind(MemorySegment struct) {
        return struct.get(kind$LAYOUT, kind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t kind
     * }
     */
    public static void kind(MemorySegment struct, long fieldValue) {
        struct.set(kind$LAYOUT, kind$OFFSET, fieldValue);
    }

    private static final AddressLayout brief$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("brief"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *brief
     * }
     */
    public static final AddressLayout brief$layout() {
        return brief$LAYOUT;
    }

    private static final long brief$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *brief
     * }
     */
    public static final long brief$offset() {
        return brief$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *brief
     * }
     */
    public static MemorySegment brief(MemorySegment struct) {
        return struct.get(brief$LAYOUT, brief$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *brief
     * }
     */
    public static void brief(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(brief$LAYOUT, brief$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

