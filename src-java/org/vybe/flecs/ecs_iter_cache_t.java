// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_iter_cache_t {
 *     ecs_stack_cursor_t *stack_cursor;
 *     ecs_flags8_t used;
 *     ecs_flags8_t allocated;
 * }
 * }
 */
public class ecs_iter_cache_t {

    ecs_iter_cache_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_POINTER.withName("stack_cursor"),
        flecs.C_CHAR.withName("used"),
        flecs.C_CHAR.withName("allocated"),
        MemoryLayout.paddingLayout(6)
    ).withName("ecs_iter_cache_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout stack_cursor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stack_cursor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_stack_cursor_t *stack_cursor
     * }
     */
    public static final AddressLayout stack_cursor$layout() {
        return stack_cursor$LAYOUT;
    }

    private static final long stack_cursor$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_stack_cursor_t *stack_cursor
     * }
     */
    public static final long stack_cursor$offset() {
        return stack_cursor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_stack_cursor_t *stack_cursor
     * }
     */
    public static MemorySegment stack_cursor(MemorySegment struct) {
        return struct.get(stack_cursor$LAYOUT, stack_cursor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_stack_cursor_t *stack_cursor
     * }
     */
    public static void stack_cursor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stack_cursor$LAYOUT, stack_cursor$OFFSET, fieldValue);
    }

    private static final OfByte used$LAYOUT = (OfByte)$LAYOUT.select(groupElement("used"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_flags8_t used
     * }
     */
    public static final OfByte used$layout() {
        return used$LAYOUT;
    }

    private static final long used$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_flags8_t used
     * }
     */
    public static final long used$offset() {
        return used$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_flags8_t used
     * }
     */
    public static byte used(MemorySegment struct) {
        return struct.get(used$LAYOUT, used$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_flags8_t used
     * }
     */
    public static void used(MemorySegment struct, byte fieldValue) {
        struct.set(used$LAYOUT, used$OFFSET, fieldValue);
    }

    private static final OfByte allocated$LAYOUT = (OfByte)$LAYOUT.select(groupElement("allocated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_flags8_t allocated
     * }
     */
    public static final OfByte allocated$layout() {
        return allocated$LAYOUT;
    }

    private static final long allocated$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_flags8_t allocated
     * }
     */
    public static final long allocated$offset() {
        return allocated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_flags8_t allocated
     * }
     */
    public static byte allocated(MemorySegment struct) {
        return struct.get(allocated$LAYOUT, allocated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_flags8_t allocated
     * }
     */
    public static void allocated(MemorySegment struct, byte fieldValue) {
        struct.set(allocated$LAYOUT, allocated$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

