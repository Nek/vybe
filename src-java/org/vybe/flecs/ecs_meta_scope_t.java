// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_meta_scope_t {
 *     ecs_entity_t type;
 *     ecs_meta_type_op_t *ops;
 *     int32_t op_count;
 *     int32_t op_cur;
 *     int32_t elem_cur;
 *     int32_t prev_depth;
 *     void *ptr;
 *     const EcsComponent *comp;
 *     const EcsOpaque *opaque;
 *     ecs_vec_t *vector;
 *     ecs_hashmap_t *members;
 *     bool is_collection;
 *     bool is_inline_array;
 *     bool is_empty_scope;
 * }
 * }
 */
public class ecs_meta_scope_t {

    ecs_meta_scope_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_LONG_LONG.withName("type"),
        flecs.C_POINTER.withName("ops"),
        flecs.C_INT.withName("op_count"),
        flecs.C_INT.withName("op_cur"),
        flecs.C_INT.withName("elem_cur"),
        flecs.C_INT.withName("prev_depth"),
        flecs.C_POINTER.withName("ptr"),
        flecs.C_POINTER.withName("comp"),
        flecs.C_POINTER.withName("opaque"),
        flecs.C_POINTER.withName("vector"),
        flecs.C_POINTER.withName("members"),
        flecs.C_BOOL.withName("is_collection"),
        flecs.C_BOOL.withName("is_inline_array"),
        flecs.C_BOOL.withName("is_empty_scope"),
        MemoryLayout.paddingLayout(5)
    ).withName("ecs_meta_scope_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong type$LAYOUT = (OfLong)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t type
     * }
     */
    public static final OfLong type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t type
     * }
     */
    public static long type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t type
     * }
     */
    public static void type(MemorySegment struct, long fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final AddressLayout ops$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ops"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_meta_type_op_t *ops
     * }
     */
    public static final AddressLayout ops$layout() {
        return ops$LAYOUT;
    }

    private static final long ops$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_meta_type_op_t *ops
     * }
     */
    public static final long ops$offset() {
        return ops$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_meta_type_op_t *ops
     * }
     */
    public static MemorySegment ops(MemorySegment struct) {
        return struct.get(ops$LAYOUT, ops$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_meta_type_op_t *ops
     * }
     */
    public static void ops(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ops$LAYOUT, ops$OFFSET, fieldValue);
    }

    private static final OfInt op_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("op_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t op_count
     * }
     */
    public static final OfInt op_count$layout() {
        return op_count$LAYOUT;
    }

    private static final long op_count$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t op_count
     * }
     */
    public static final long op_count$offset() {
        return op_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t op_count
     * }
     */
    public static int op_count(MemorySegment struct) {
        return struct.get(op_count$LAYOUT, op_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t op_count
     * }
     */
    public static void op_count(MemorySegment struct, int fieldValue) {
        struct.set(op_count$LAYOUT, op_count$OFFSET, fieldValue);
    }

    private static final OfInt op_cur$LAYOUT = (OfInt)$LAYOUT.select(groupElement("op_cur"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t op_cur
     * }
     */
    public static final OfInt op_cur$layout() {
        return op_cur$LAYOUT;
    }

    private static final long op_cur$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t op_cur
     * }
     */
    public static final long op_cur$offset() {
        return op_cur$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t op_cur
     * }
     */
    public static int op_cur(MemorySegment struct) {
        return struct.get(op_cur$LAYOUT, op_cur$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t op_cur
     * }
     */
    public static void op_cur(MemorySegment struct, int fieldValue) {
        struct.set(op_cur$LAYOUT, op_cur$OFFSET, fieldValue);
    }

    private static final OfInt elem_cur$LAYOUT = (OfInt)$LAYOUT.select(groupElement("elem_cur"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t elem_cur
     * }
     */
    public static final OfInt elem_cur$layout() {
        return elem_cur$LAYOUT;
    }

    private static final long elem_cur$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t elem_cur
     * }
     */
    public static final long elem_cur$offset() {
        return elem_cur$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t elem_cur
     * }
     */
    public static int elem_cur(MemorySegment struct) {
        return struct.get(elem_cur$LAYOUT, elem_cur$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t elem_cur
     * }
     */
    public static void elem_cur(MemorySegment struct, int fieldValue) {
        struct.set(elem_cur$LAYOUT, elem_cur$OFFSET, fieldValue);
    }

    private static final OfInt prev_depth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("prev_depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t prev_depth
     * }
     */
    public static final OfInt prev_depth$layout() {
        return prev_depth$LAYOUT;
    }

    private static final long prev_depth$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t prev_depth
     * }
     */
    public static final long prev_depth$offset() {
        return prev_depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t prev_depth
     * }
     */
    public static int prev_depth(MemorySegment struct) {
        return struct.get(prev_depth$LAYOUT, prev_depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t prev_depth
     * }
     */
    public static void prev_depth(MemorySegment struct, int fieldValue) {
        struct.set(prev_depth$LAYOUT, prev_depth$OFFSET, fieldValue);
    }

    private static final AddressLayout ptr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ptr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static final AddressLayout ptr$layout() {
        return ptr$LAYOUT;
    }

    private static final long ptr$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static final long ptr$offset() {
        return ptr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static MemorySegment ptr(MemorySegment struct) {
        return struct.get(ptr$LAYOUT, ptr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static void ptr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ptr$LAYOUT, ptr$OFFSET, fieldValue);
    }

    private static final AddressLayout comp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("comp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const EcsComponent *comp
     * }
     */
    public static final AddressLayout comp$layout() {
        return comp$LAYOUT;
    }

    private static final long comp$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const EcsComponent *comp
     * }
     */
    public static final long comp$offset() {
        return comp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const EcsComponent *comp
     * }
     */
    public static MemorySegment comp(MemorySegment struct) {
        return struct.get(comp$LAYOUT, comp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const EcsComponent *comp
     * }
     */
    public static void comp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(comp$LAYOUT, comp$OFFSET, fieldValue);
    }

    private static final AddressLayout opaque$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("opaque"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const EcsOpaque *opaque
     * }
     */
    public static final AddressLayout opaque$layout() {
        return opaque$LAYOUT;
    }

    private static final long opaque$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const EcsOpaque *opaque
     * }
     */
    public static final long opaque$offset() {
        return opaque$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const EcsOpaque *opaque
     * }
     */
    public static MemorySegment opaque(MemorySegment struct) {
        return struct.get(opaque$LAYOUT, opaque$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const EcsOpaque *opaque
     * }
     */
    public static void opaque(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(opaque$LAYOUT, opaque$OFFSET, fieldValue);
    }

    private static final AddressLayout vector$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vector"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_vec_t *vector
     * }
     */
    public static final AddressLayout vector$layout() {
        return vector$LAYOUT;
    }

    private static final long vector$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_vec_t *vector
     * }
     */
    public static final long vector$offset() {
        return vector$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_vec_t *vector
     * }
     */
    public static MemorySegment vector(MemorySegment struct) {
        return struct.get(vector$LAYOUT, vector$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_vec_t *vector
     * }
     */
    public static void vector(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vector$LAYOUT, vector$OFFSET, fieldValue);
    }

    private static final AddressLayout members$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("members"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_hashmap_t *members
     * }
     */
    public static final AddressLayout members$layout() {
        return members$LAYOUT;
    }

    private static final long members$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_hashmap_t *members
     * }
     */
    public static final long members$offset() {
        return members$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_hashmap_t *members
     * }
     */
    public static MemorySegment members(MemorySegment struct) {
        return struct.get(members$LAYOUT, members$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_hashmap_t *members
     * }
     */
    public static void members(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(members$LAYOUT, members$OFFSET, fieldValue);
    }

    private static final OfBoolean is_collection$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_collection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_collection
     * }
     */
    public static final OfBoolean is_collection$layout() {
        return is_collection$LAYOUT;
    }

    private static final long is_collection$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_collection
     * }
     */
    public static final long is_collection$offset() {
        return is_collection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_collection
     * }
     */
    public static boolean is_collection(MemorySegment struct) {
        return struct.get(is_collection$LAYOUT, is_collection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_collection
     * }
     */
    public static void is_collection(MemorySegment struct, boolean fieldValue) {
        struct.set(is_collection$LAYOUT, is_collection$OFFSET, fieldValue);
    }

    private static final OfBoolean is_inline_array$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_inline_array"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_inline_array
     * }
     */
    public static final OfBoolean is_inline_array$layout() {
        return is_inline_array$LAYOUT;
    }

    private static final long is_inline_array$OFFSET = 73;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_inline_array
     * }
     */
    public static final long is_inline_array$offset() {
        return is_inline_array$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_inline_array
     * }
     */
    public static boolean is_inline_array(MemorySegment struct) {
        return struct.get(is_inline_array$LAYOUT, is_inline_array$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_inline_array
     * }
     */
    public static void is_inline_array(MemorySegment struct, boolean fieldValue) {
        struct.set(is_inline_array$LAYOUT, is_inline_array$OFFSET, fieldValue);
    }

    private static final OfBoolean is_empty_scope$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_empty_scope"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_empty_scope
     * }
     */
    public static final OfBoolean is_empty_scope$layout() {
        return is_empty_scope$LAYOUT;
    }

    private static final long is_empty_scope$OFFSET = 74;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_empty_scope
     * }
     */
    public static final long is_empty_scope$offset() {
        return is_empty_scope$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_empty_scope
     * }
     */
    public static boolean is_empty_scope(MemorySegment struct) {
        return struct.get(is_empty_scope$LAYOUT, is_empty_scope$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_empty_scope
     * }
     */
    public static void is_empty_scope(MemorySegment struct, boolean fieldValue) {
        struct.set(is_empty_scope$LAYOUT, is_empty_scope$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

