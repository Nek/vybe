// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct EcsOpaque {
 *     ecs_entity_t as_type;
 *     ecs_meta_serialize_t serialize;
 *     void (*assign_bool)(void *, bool);
 *     void (*assign_char)(void *, char);
 *     void (*assign_int)(void *, int64_t);
 *     void (*assign_uint)(void *, uint64_t);
 *     void (*assign_float)(void *, double);
 *     void (*assign_string)(void *, const char *);
 *     void (*assign_entity)(void *, ecs_world_t *, ecs_entity_t);
 *     void (*assign_id)(void *, ecs_world_t *, ecs_id_t);
 *     void (*assign_null)(void *);
 *     void (*clear)(void *);
 *     void *(*ensure_element)(void *, size_t);
 *     void *(*ensure_member)(void *, const char *);
 *     size_t (*count)(const void *);
 *     void (*resize)(void *, size_t);
 * }
 * }
 */
public class EcsOpaque {

    EcsOpaque() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_LONG_LONG.withName("as_type"),
        flecs.C_POINTER.withName("serialize"),
        flecs.C_POINTER.withName("assign_bool"),
        flecs.C_POINTER.withName("assign_char"),
        flecs.C_POINTER.withName("assign_int"),
        flecs.C_POINTER.withName("assign_uint"),
        flecs.C_POINTER.withName("assign_float"),
        flecs.C_POINTER.withName("assign_string"),
        flecs.C_POINTER.withName("assign_entity"),
        flecs.C_POINTER.withName("assign_id"),
        flecs.C_POINTER.withName("assign_null"),
        flecs.C_POINTER.withName("clear"),
        flecs.C_POINTER.withName("ensure_element"),
        flecs.C_POINTER.withName("ensure_member"),
        flecs.C_POINTER.withName("count"),
        flecs.C_POINTER.withName("resize")
    ).withName("EcsOpaque");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong as_type$LAYOUT = (OfLong)$LAYOUT.select(groupElement("as_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t as_type
     * }
     */
    public static final OfLong as_type$layout() {
        return as_type$LAYOUT;
    }

    private static final long as_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t as_type
     * }
     */
    public static final long as_type$offset() {
        return as_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t as_type
     * }
     */
    public static long as_type(MemorySegment struct) {
        return struct.get(as_type$LAYOUT, as_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t as_type
     * }
     */
    public static void as_type(MemorySegment struct, long fieldValue) {
        struct.set(as_type$LAYOUT, as_type$OFFSET, fieldValue);
    }

    private static final AddressLayout serialize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("serialize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_meta_serialize_t serialize
     * }
     */
    public static final AddressLayout serialize$layout() {
        return serialize$LAYOUT;
    }

    private static final long serialize$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_meta_serialize_t serialize
     * }
     */
    public static final long serialize$offset() {
        return serialize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_meta_serialize_t serialize
     * }
     */
    public static MemorySegment serialize(MemorySegment struct) {
        return struct.get(serialize$LAYOUT, serialize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_meta_serialize_t serialize
     * }
     */
    public static void serialize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(serialize$LAYOUT, serialize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*assign_bool)(void *, bool)
     * }
     */
    public static class assign_bool {

        assign_bool() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, boolean _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            flecs.C_POINTER,
            flecs.C_BOOL
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(assign_bool.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(assign_bool.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, boolean _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout assign_bool$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("assign_bool"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*assign_bool)(void *, bool)
     * }
     */
    public static final AddressLayout assign_bool$layout() {
        return assign_bool$LAYOUT;
    }

    private static final long assign_bool$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*assign_bool)(void *, bool)
     * }
     */
    public static final long assign_bool$offset() {
        return assign_bool$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*assign_bool)(void *, bool)
     * }
     */
    public static MemorySegment assign_bool(MemorySegment struct) {
        return struct.get(assign_bool$LAYOUT, assign_bool$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*assign_bool)(void *, bool)
     * }
     */
    public static void assign_bool(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(assign_bool$LAYOUT, assign_bool$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*assign_char)(void *, char)
     * }
     */
    public static class assign_char {

        assign_char() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, byte _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            flecs.C_POINTER,
            flecs.C_CHAR
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(assign_char.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(assign_char.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, byte _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout assign_char$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("assign_char"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*assign_char)(void *, char)
     * }
     */
    public static final AddressLayout assign_char$layout() {
        return assign_char$LAYOUT;
    }

    private static final long assign_char$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*assign_char)(void *, char)
     * }
     */
    public static final long assign_char$offset() {
        return assign_char$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*assign_char)(void *, char)
     * }
     */
    public static MemorySegment assign_char(MemorySegment struct) {
        return struct.get(assign_char$LAYOUT, assign_char$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*assign_char)(void *, char)
     * }
     */
    public static void assign_char(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(assign_char$LAYOUT, assign_char$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*assign_int)(void *, int64_t)
     * }
     */
    public static class assign_int {

        assign_int() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            flecs.C_POINTER,
            flecs.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(assign_int.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(assign_int.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout assign_int$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("assign_int"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*assign_int)(void *, int64_t)
     * }
     */
    public static final AddressLayout assign_int$layout() {
        return assign_int$LAYOUT;
    }

    private static final long assign_int$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*assign_int)(void *, int64_t)
     * }
     */
    public static final long assign_int$offset() {
        return assign_int$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*assign_int)(void *, int64_t)
     * }
     */
    public static MemorySegment assign_int(MemorySegment struct) {
        return struct.get(assign_int$LAYOUT, assign_int$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*assign_int)(void *, int64_t)
     * }
     */
    public static void assign_int(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(assign_int$LAYOUT, assign_int$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*assign_uint)(void *, uint64_t)
     * }
     */
    public static class assign_uint {

        assign_uint() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            flecs.C_POINTER,
            flecs.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(assign_uint.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(assign_uint.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout assign_uint$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("assign_uint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*assign_uint)(void *, uint64_t)
     * }
     */
    public static final AddressLayout assign_uint$layout() {
        return assign_uint$LAYOUT;
    }

    private static final long assign_uint$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*assign_uint)(void *, uint64_t)
     * }
     */
    public static final long assign_uint$offset() {
        return assign_uint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*assign_uint)(void *, uint64_t)
     * }
     */
    public static MemorySegment assign_uint(MemorySegment struct) {
        return struct.get(assign_uint$LAYOUT, assign_uint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*assign_uint)(void *, uint64_t)
     * }
     */
    public static void assign_uint(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(assign_uint$LAYOUT, assign_uint$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*assign_float)(void *, double)
     * }
     */
    public static class assign_float {

        assign_float() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, double _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            flecs.C_POINTER,
            flecs.C_DOUBLE
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(assign_float.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(assign_float.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, double _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout assign_float$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("assign_float"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*assign_float)(void *, double)
     * }
     */
    public static final AddressLayout assign_float$layout() {
        return assign_float$LAYOUT;
    }

    private static final long assign_float$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*assign_float)(void *, double)
     * }
     */
    public static final long assign_float$offset() {
        return assign_float$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*assign_float)(void *, double)
     * }
     */
    public static MemorySegment assign_float(MemorySegment struct) {
        return struct.get(assign_float$LAYOUT, assign_float$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*assign_float)(void *, double)
     * }
     */
    public static void assign_float(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(assign_float$LAYOUT, assign_float$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*assign_string)(void *, const char *)
     * }
     */
    public static class assign_string {

        assign_string() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            flecs.C_POINTER,
            flecs.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(assign_string.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(assign_string.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout assign_string$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("assign_string"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*assign_string)(void *, const char *)
     * }
     */
    public static final AddressLayout assign_string$layout() {
        return assign_string$LAYOUT;
    }

    private static final long assign_string$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*assign_string)(void *, const char *)
     * }
     */
    public static final long assign_string$offset() {
        return assign_string$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*assign_string)(void *, const char *)
     * }
     */
    public static MemorySegment assign_string(MemorySegment struct) {
        return struct.get(assign_string$LAYOUT, assign_string$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*assign_string)(void *, const char *)
     * }
     */
    public static void assign_string(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(assign_string$LAYOUT, assign_string$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*assign_entity)(void *, ecs_world_t *, ecs_entity_t)
     * }
     */
    public static class assign_entity {

        assign_entity() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            flecs.C_POINTER,
            flecs.C_POINTER,
            flecs.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(assign_entity.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(assign_entity.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout assign_entity$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("assign_entity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*assign_entity)(void *, ecs_world_t *, ecs_entity_t)
     * }
     */
    public static final AddressLayout assign_entity$layout() {
        return assign_entity$LAYOUT;
    }

    private static final long assign_entity$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*assign_entity)(void *, ecs_world_t *, ecs_entity_t)
     * }
     */
    public static final long assign_entity$offset() {
        return assign_entity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*assign_entity)(void *, ecs_world_t *, ecs_entity_t)
     * }
     */
    public static MemorySegment assign_entity(MemorySegment struct) {
        return struct.get(assign_entity$LAYOUT, assign_entity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*assign_entity)(void *, ecs_world_t *, ecs_entity_t)
     * }
     */
    public static void assign_entity(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(assign_entity$LAYOUT, assign_entity$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*assign_id)(void *, ecs_world_t *, ecs_id_t)
     * }
     */
    public static class assign_id {

        assign_id() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            flecs.C_POINTER,
            flecs.C_POINTER,
            flecs.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(assign_id.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(assign_id.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout assign_id$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("assign_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*assign_id)(void *, ecs_world_t *, ecs_id_t)
     * }
     */
    public static final AddressLayout assign_id$layout() {
        return assign_id$LAYOUT;
    }

    private static final long assign_id$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*assign_id)(void *, ecs_world_t *, ecs_id_t)
     * }
     */
    public static final long assign_id$offset() {
        return assign_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*assign_id)(void *, ecs_world_t *, ecs_id_t)
     * }
     */
    public static MemorySegment assign_id(MemorySegment struct) {
        return struct.get(assign_id$LAYOUT, assign_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*assign_id)(void *, ecs_world_t *, ecs_id_t)
     * }
     */
    public static void assign_id(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(assign_id$LAYOUT, assign_id$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*assign_null)(void *)
     * }
     */
    public static class assign_null {

        assign_null() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            flecs.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(assign_null.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(assign_null.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout assign_null$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("assign_null"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*assign_null)(void *)
     * }
     */
    public static final AddressLayout assign_null$layout() {
        return assign_null$LAYOUT;
    }

    private static final long assign_null$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*assign_null)(void *)
     * }
     */
    public static final long assign_null$offset() {
        return assign_null$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*assign_null)(void *)
     * }
     */
    public static MemorySegment assign_null(MemorySegment struct) {
        return struct.get(assign_null$LAYOUT, assign_null$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*assign_null)(void *)
     * }
     */
    public static void assign_null(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(assign_null$LAYOUT, assign_null$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*clear)(void *)
     * }
     */
    public static class clear {

        clear() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            flecs.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(clear.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(clear.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout clear$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("clear"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*clear)(void *)
     * }
     */
    public static final AddressLayout clear$layout() {
        return clear$LAYOUT;
    }

    private static final long clear$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*clear)(void *)
     * }
     */
    public static final long clear$offset() {
        return clear$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*clear)(void *)
     * }
     */
    public static MemorySegment clear(MemorySegment struct) {
        return struct.get(clear$LAYOUT, clear$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*clear)(void *)
     * }
     */
    public static void clear(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(clear$LAYOUT, clear$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*ensure_element)(void *, size_t)
     * }
     */
    public static class ensure_element {

        ensure_element() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            flecs.C_POINTER,
            flecs.C_POINTER,
            flecs.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(ensure_element.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ensure_element.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ensure_element$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ensure_element"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*ensure_element)(void *, size_t)
     * }
     */
    public static final AddressLayout ensure_element$layout() {
        return ensure_element$LAYOUT;
    }

    private static final long ensure_element$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*ensure_element)(void *, size_t)
     * }
     */
    public static final long ensure_element$offset() {
        return ensure_element$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*ensure_element)(void *, size_t)
     * }
     */
    public static MemorySegment ensure_element(MemorySegment struct) {
        return struct.get(ensure_element$LAYOUT, ensure_element$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*ensure_element)(void *, size_t)
     * }
     */
    public static void ensure_element(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ensure_element$LAYOUT, ensure_element$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*ensure_member)(void *, const char *)
     * }
     */
    public static class ensure_member {

        ensure_member() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            flecs.C_POINTER,
            flecs.C_POINTER,
            flecs.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(ensure_member.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ensure_member.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ensure_member$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ensure_member"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*ensure_member)(void *, const char *)
     * }
     */
    public static final AddressLayout ensure_member$layout() {
        return ensure_member$LAYOUT;
    }

    private static final long ensure_member$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*ensure_member)(void *, const char *)
     * }
     */
    public static final long ensure_member$offset() {
        return ensure_member$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*ensure_member)(void *, const char *)
     * }
     */
    public static MemorySegment ensure_member(MemorySegment struct) {
        return struct.get(ensure_member$LAYOUT, ensure_member$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*ensure_member)(void *, const char *)
     * }
     */
    public static void ensure_member(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ensure_member$LAYOUT, ensure_member$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * size_t (*count)(const void *)
     * }
     */
    public static class count {

        count() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            flecs.C_LONG,
            flecs.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(count.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(count.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout count$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t (*count)(const void *)
     * }
     */
    public static final AddressLayout count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t (*count)(const void *)
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t (*count)(const void *)
     * }
     */
    public static MemorySegment count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t (*count)(const void *)
     * }
     */
    public static void count(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*resize)(void *, size_t)
     * }
     */
    public static class resize {

        resize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            flecs.C_POINTER,
            flecs.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = flecs.upcallHandle(resize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(resize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout resize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("resize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*resize)(void *, size_t)
     * }
     */
    public static final AddressLayout resize$layout() {
        return resize$LAYOUT;
    }

    private static final long resize$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*resize)(void *, size_t)
     * }
     */
    public static final long resize$offset() {
        return resize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*resize)(void *, size_t)
     * }
     */
    public static MemorySegment resize(MemorySegment struct) {
        return struct.get(resize$LAYOUT, resize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*resize)(void *, size_t)
     * }
     */
    public static void resize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(resize$LAYOUT, resize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

