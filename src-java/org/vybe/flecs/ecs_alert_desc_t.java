// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_alert_desc_t {
 *     int32_t _canary;
 *     ecs_entity_t entity;
 *     ecs_query_desc_t query;
 *     const char *message;
 *     const char *doc_name;
 *     const char *brief;
 *     ecs_entity_t severity;
 *     ecs_alert_severity_filter_t severity_filters[4];
 *     float retain_period;
 *     ecs_entity_t member;
 *     ecs_id_t id;
 *     const char *var;
 * }
 * }
 */
public class ecs_alert_desc_t {

    ecs_alert_desc_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_INT.withName("_canary"),
        MemoryLayout.paddingLayout(4),
        flecs.C_LONG_LONG.withName("entity"),
        ecs_query_desc_t.layout().withName("query"),
        flecs.C_POINTER.withName("message"),
        flecs.C_POINTER.withName("doc_name"),
        flecs.C_POINTER.withName("brief"),
        flecs.C_LONG_LONG.withName("severity"),
        MemoryLayout.sequenceLayout(4, ecs_alert_severity_filter_t.layout()).withName("severity_filters"),
        flecs.C_FLOAT.withName("retain_period"),
        MemoryLayout.paddingLayout(4),
        flecs.C_LONG_LONG.withName("member"),
        flecs.C_LONG_LONG.withName("id"),
        flecs.C_POINTER.withName("var")
    ).withName("ecs_alert_desc_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt _canary$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_canary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static final OfInt _canary$layout() {
        return _canary$LAYOUT;
    }

    private static final long _canary$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static final long _canary$offset() {
        return _canary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static int _canary(MemorySegment struct) {
        return struct.get(_canary$LAYOUT, _canary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t _canary
     * }
     */
    public static void _canary(MemorySegment struct, int fieldValue) {
        struct.set(_canary$LAYOUT, _canary$OFFSET, fieldValue);
    }

    private static final OfLong entity$LAYOUT = (OfLong)$LAYOUT.select(groupElement("entity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static final OfLong entity$layout() {
        return entity$LAYOUT;
    }

    private static final long entity$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static final long entity$offset() {
        return entity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static long entity(MemorySegment struct) {
        return struct.get(entity$LAYOUT, entity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static void entity(MemorySegment struct, long fieldValue) {
        struct.set(entity$LAYOUT, entity$OFFSET, fieldValue);
    }

    private static final GroupLayout query$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("query"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_query_desc_t query
     * }
     */
    public static final GroupLayout query$layout() {
        return query$LAYOUT;
    }

    private static final long query$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_query_desc_t query
     * }
     */
    public static final long query$offset() {
        return query$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_query_desc_t query
     * }
     */
    public static MemorySegment query(MemorySegment struct) {
        return struct.asSlice(query$OFFSET, query$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_query_desc_t query
     * }
     */
    public static void query(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, query$OFFSET, query$LAYOUT.byteSize());
    }

    private static final AddressLayout message$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("message"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *message
     * }
     */
    public static final AddressLayout message$layout() {
        return message$LAYOUT;
    }

    private static final long message$OFFSET = 1304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *message
     * }
     */
    public static final long message$offset() {
        return message$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *message
     * }
     */
    public static MemorySegment message(MemorySegment struct) {
        return struct.get(message$LAYOUT, message$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *message
     * }
     */
    public static void message(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(message$LAYOUT, message$OFFSET, fieldValue);
    }

    private static final AddressLayout doc_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("doc_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *doc_name
     * }
     */
    public static final AddressLayout doc_name$layout() {
        return doc_name$LAYOUT;
    }

    private static final long doc_name$OFFSET = 1312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *doc_name
     * }
     */
    public static final long doc_name$offset() {
        return doc_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *doc_name
     * }
     */
    public static MemorySegment doc_name(MemorySegment struct) {
        return struct.get(doc_name$LAYOUT, doc_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *doc_name
     * }
     */
    public static void doc_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(doc_name$LAYOUT, doc_name$OFFSET, fieldValue);
    }

    private static final AddressLayout brief$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("brief"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *brief
     * }
     */
    public static final AddressLayout brief$layout() {
        return brief$LAYOUT;
    }

    private static final long brief$OFFSET = 1320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *brief
     * }
     */
    public static final long brief$offset() {
        return brief$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *brief
     * }
     */
    public static MemorySegment brief(MemorySegment struct) {
        return struct.get(brief$LAYOUT, brief$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *brief
     * }
     */
    public static void brief(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(brief$LAYOUT, brief$OFFSET, fieldValue);
    }

    private static final OfLong severity$LAYOUT = (OfLong)$LAYOUT.select(groupElement("severity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t severity
     * }
     */
    public static final OfLong severity$layout() {
        return severity$LAYOUT;
    }

    private static final long severity$OFFSET = 1328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t severity
     * }
     */
    public static final long severity$offset() {
        return severity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t severity
     * }
     */
    public static long severity(MemorySegment struct) {
        return struct.get(severity$LAYOUT, severity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t severity
     * }
     */
    public static void severity(MemorySegment struct, long fieldValue) {
        struct.set(severity$LAYOUT, severity$OFFSET, fieldValue);
    }

    private static final SequenceLayout severity_filters$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("severity_filters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_alert_severity_filter_t severity_filters[4]
     * }
     */
    public static final SequenceLayout severity_filters$layout() {
        return severity_filters$LAYOUT;
    }

    private static final long severity_filters$OFFSET = 1336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_alert_severity_filter_t severity_filters[4]
     * }
     */
    public static final long severity_filters$offset() {
        return severity_filters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_alert_severity_filter_t severity_filters[4]
     * }
     */
    public static MemorySegment severity_filters(MemorySegment struct) {
        return struct.asSlice(severity_filters$OFFSET, severity_filters$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_alert_severity_filter_t severity_filters[4]
     * }
     */
    public static void severity_filters(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, severity_filters$OFFSET, severity_filters$LAYOUT.byteSize());
    }

    private static long[] severity_filters$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ecs_alert_severity_filter_t severity_filters[4]
     * }
     */
    public static long[] severity_filters$dimensions() {
        return severity_filters$DIMS;
    }
    private static final MethodHandle severity_filters$ELEM_HANDLE = severity_filters$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ecs_alert_severity_filter_t severity_filters[4]
     * }
     */
    public static MemorySegment severity_filters(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)severity_filters$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ecs_alert_severity_filter_t severity_filters[4]
     * }
     */
    public static void severity_filters(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, severity_filters(struct, index0), 0L, ecs_alert_severity_filter_t.layout().byteSize());
    }

    private static final OfFloat retain_period$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("retain_period"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float retain_period
     * }
     */
    public static final OfFloat retain_period$layout() {
        return retain_period$LAYOUT;
    }

    private static final long retain_period$OFFSET = 1464;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float retain_period
     * }
     */
    public static final long retain_period$offset() {
        return retain_period$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float retain_period
     * }
     */
    public static float retain_period(MemorySegment struct) {
        return struct.get(retain_period$LAYOUT, retain_period$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float retain_period
     * }
     */
    public static void retain_period(MemorySegment struct, float fieldValue) {
        struct.set(retain_period$LAYOUT, retain_period$OFFSET, fieldValue);
    }

    private static final OfLong member$LAYOUT = (OfLong)$LAYOUT.select(groupElement("member"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t member
     * }
     */
    public static final OfLong member$layout() {
        return member$LAYOUT;
    }

    private static final long member$OFFSET = 1472;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t member
     * }
     */
    public static final long member$offset() {
        return member$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t member
     * }
     */
    public static long member(MemorySegment struct) {
        return struct.get(member$LAYOUT, member$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t member
     * }
     */
    public static void member(MemorySegment struct, long fieldValue) {
        struct.set(member$LAYOUT, member$OFFSET, fieldValue);
    }

    private static final OfLong id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_id_t id
     * }
     */
    public static final OfLong id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 1480;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_id_t id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_id_t id
     * }
     */
    public static long id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_id_t id
     * }
     */
    public static void id(MemorySegment struct, long fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final AddressLayout var_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("var"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *var
     * }
     */
    public static final AddressLayout var_$layout() {
        return var_$LAYOUT;
    }

    private static final long var_$OFFSET = 1488;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *var
     * }
     */
    public static final long var_$offset() {
        return var_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *var
     * }
     */
    public static MemorySegment var_(MemorySegment struct) {
        return struct.get(var_$LAYOUT, var_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *var
     * }
     */
    public static void var_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(var_$LAYOUT, var_$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

