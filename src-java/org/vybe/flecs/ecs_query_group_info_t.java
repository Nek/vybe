// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_query_group_info_t {
 *     int32_t match_count;
 *     int32_t table_count;
 *     void *ctx;
 * }
 * }
 */
public class ecs_query_group_info_t {

    ecs_query_group_info_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_INT.withName("match_count"),
        flecs.C_INT.withName("table_count"),
        flecs.C_POINTER.withName("ctx")
    ).withName("ecs_query_group_info_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt match_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("match_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t match_count
     * }
     */
    public static final OfInt match_count$layout() {
        return match_count$LAYOUT;
    }

    private static final long match_count$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t match_count
     * }
     */
    public static final long match_count$offset() {
        return match_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t match_count
     * }
     */
    public static int match_count(MemorySegment struct) {
        return struct.get(match_count$LAYOUT, match_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t match_count
     * }
     */
    public static void match_count(MemorySegment struct, int fieldValue) {
        struct.set(match_count$LAYOUT, match_count$OFFSET, fieldValue);
    }

    private static final OfInt table_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("table_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t table_count
     * }
     */
    public static final OfInt table_count$layout() {
        return table_count$LAYOUT;
    }

    private static final long table_count$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t table_count
     * }
     */
    public static final long table_count$offset() {
        return table_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t table_count
     * }
     */
    public static int table_count(MemorySegment struct) {
        return struct.get(table_count$LAYOUT, table_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t table_count
     * }
     */
    public static void table_count(MemorySegment struct, int fieldValue) {
        struct.set(table_count$LAYOUT, table_count$OFFSET, fieldValue);
    }

    private static final AddressLayout ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static final AddressLayout ctx$layout() {
        return ctx$LAYOUT;
    }

    private static final long ctx$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static final long ctx$offset() {
        return ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static MemorySegment ctx(MemorySegment struct) {
        return struct.get(ctx$LAYOUT, ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static void ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ctx$LAYOUT, ctx$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

