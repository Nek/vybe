// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_event_desc_t {
 *     ecs_entity_t event;
 *     const ecs_type_t *ids;
 *     ecs_table_t *table;
 *     ecs_table_t *other_table;
 *     int32_t offset;
 *     int32_t count;
 *     ecs_entity_t entity;
 *     void *param;
 *     const void *const_param;
 *     ecs_poly_t *observable;
 *     ecs_flags32_t flags;
 * }
 * }
 */
public class ecs_event_desc_t {

    ecs_event_desc_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_LONG_LONG.withName("event"),
        flecs.C_POINTER.withName("ids"),
        flecs.C_POINTER.withName("table"),
        flecs.C_POINTER.withName("other_table"),
        flecs.C_INT.withName("offset"),
        flecs.C_INT.withName("count"),
        flecs.C_LONG_LONG.withName("entity"),
        flecs.C_POINTER.withName("param"),
        flecs.C_POINTER.withName("const_param"),
        flecs.C_POINTER.withName("observable"),
        flecs.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4)
    ).withName("ecs_event_desc_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong event$LAYOUT = (OfLong)$LAYOUT.select(groupElement("event"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t event
     * }
     */
    public static final OfLong event$layout() {
        return event$LAYOUT;
    }

    private static final long event$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t event
     * }
     */
    public static final long event$offset() {
        return event$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t event
     * }
     */
    public static long event(MemorySegment struct) {
        return struct.get(event$LAYOUT, event$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t event
     * }
     */
    public static void event(MemorySegment struct, long fieldValue) {
        struct.set(event$LAYOUT, event$OFFSET, fieldValue);
    }

    private static final AddressLayout ids$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ids"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ecs_type_t *ids
     * }
     */
    public static final AddressLayout ids$layout() {
        return ids$LAYOUT;
    }

    private static final long ids$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ecs_type_t *ids
     * }
     */
    public static final long ids$offset() {
        return ids$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ecs_type_t *ids
     * }
     */
    public static MemorySegment ids(MemorySegment struct) {
        return struct.get(ids$LAYOUT, ids$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ecs_type_t *ids
     * }
     */
    public static void ids(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ids$LAYOUT, ids$OFFSET, fieldValue);
    }

    private static final AddressLayout table$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_table_t *table
     * }
     */
    public static final AddressLayout table$layout() {
        return table$LAYOUT;
    }

    private static final long table$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_table_t *table
     * }
     */
    public static final long table$offset() {
        return table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_table_t *table
     * }
     */
    public static MemorySegment table(MemorySegment struct) {
        return struct.get(table$LAYOUT, table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_table_t *table
     * }
     */
    public static void table(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(table$LAYOUT, table$OFFSET, fieldValue);
    }

    private static final AddressLayout other_table$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("other_table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_table_t *other_table
     * }
     */
    public static final AddressLayout other_table$layout() {
        return other_table$LAYOUT;
    }

    private static final long other_table$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_table_t *other_table
     * }
     */
    public static final long other_table$offset() {
        return other_table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_table_t *other_table
     * }
     */
    public static MemorySegment other_table(MemorySegment struct) {
        return struct.get(other_table$LAYOUT, other_table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_table_t *other_table
     * }
     */
    public static void other_table(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(other_table$LAYOUT, other_table$OFFSET, fieldValue);
    }

    private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t offset
     * }
     */
    public static final OfInt offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t offset
     * }
     */
    public static int offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t offset
     * }
     */
    public static void offset(MemorySegment struct, int fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static final OfInt count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static int count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static void count(MemorySegment struct, int fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    private static final OfLong entity$LAYOUT = (OfLong)$LAYOUT.select(groupElement("entity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static final OfLong entity$layout() {
        return entity$LAYOUT;
    }

    private static final long entity$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static final long entity$offset() {
        return entity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static long entity(MemorySegment struct) {
        return struct.get(entity$LAYOUT, entity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static void entity(MemorySegment struct, long fieldValue) {
        struct.set(entity$LAYOUT, entity$OFFSET, fieldValue);
    }

    private static final AddressLayout param$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("param"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *param
     * }
     */
    public static final AddressLayout param$layout() {
        return param$LAYOUT;
    }

    private static final long param$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *param
     * }
     */
    public static final long param$offset() {
        return param$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *param
     * }
     */
    public static MemorySegment param(MemorySegment struct) {
        return struct.get(param$LAYOUT, param$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *param
     * }
     */
    public static void param(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(param$LAYOUT, param$OFFSET, fieldValue);
    }

    private static final AddressLayout const_param$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("const_param"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *const_param
     * }
     */
    public static final AddressLayout const_param$layout() {
        return const_param$LAYOUT;
    }

    private static final long const_param$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *const_param
     * }
     */
    public static final long const_param$offset() {
        return const_param$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *const_param
     * }
     */
    public static MemorySegment const_param(MemorySegment struct) {
        return struct.get(const_param$LAYOUT, const_param$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *const_param
     * }
     */
    public static void const_param(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(const_param$LAYOUT, const_param$OFFSET, fieldValue);
    }

    private static final AddressLayout observable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("observable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_poly_t *observable
     * }
     */
    public static final AddressLayout observable$layout() {
        return observable$LAYOUT;
    }

    private static final long observable$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_poly_t *observable
     * }
     */
    public static final long observable$offset() {
        return observable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_poly_t *observable
     * }
     */
    public static MemorySegment observable(MemorySegment struct) {
        return struct.get(observable$LAYOUT, observable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_poly_t *observable
     * }
     */
    public static void observable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(observable$LAYOUT, observable$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

