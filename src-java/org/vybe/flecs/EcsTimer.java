// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct EcsTimer {
 *     float timeout;
 *     float time;
 *     float overshoot;
 *     int32_t fired_count;
 *     bool active;
 *     bool single_shot;
 * }
 * }
 */
public class EcsTimer {

    EcsTimer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_FLOAT.withName("timeout"),
        flecs.C_FLOAT.withName("time"),
        flecs.C_FLOAT.withName("overshoot"),
        flecs.C_INT.withName("fired_count"),
        flecs.C_BOOL.withName("active"),
        flecs.C_BOOL.withName("single_shot"),
        MemoryLayout.paddingLayout(2)
    ).withName("EcsTimer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat timeout$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("timeout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float timeout
     * }
     */
    public static final OfFloat timeout$layout() {
        return timeout$LAYOUT;
    }

    private static final long timeout$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float timeout
     * }
     */
    public static final long timeout$offset() {
        return timeout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float timeout
     * }
     */
    public static float timeout(MemorySegment struct) {
        return struct.get(timeout$LAYOUT, timeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float timeout
     * }
     */
    public static void timeout(MemorySegment struct, float fieldValue) {
        struct.set(timeout$LAYOUT, timeout$OFFSET, fieldValue);
    }

    private static final OfFloat time$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float time
     * }
     */
    public static final OfFloat time$layout() {
        return time$LAYOUT;
    }

    private static final long time$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float time
     * }
     */
    public static final long time$offset() {
        return time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float time
     * }
     */
    public static float time(MemorySegment struct) {
        return struct.get(time$LAYOUT, time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float time
     * }
     */
    public static void time(MemorySegment struct, float fieldValue) {
        struct.set(time$LAYOUT, time$OFFSET, fieldValue);
    }

    private static final OfFloat overshoot$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("overshoot"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float overshoot
     * }
     */
    public static final OfFloat overshoot$layout() {
        return overshoot$LAYOUT;
    }

    private static final long overshoot$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float overshoot
     * }
     */
    public static final long overshoot$offset() {
        return overshoot$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float overshoot
     * }
     */
    public static float overshoot(MemorySegment struct) {
        return struct.get(overshoot$LAYOUT, overshoot$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float overshoot
     * }
     */
    public static void overshoot(MemorySegment struct, float fieldValue) {
        struct.set(overshoot$LAYOUT, overshoot$OFFSET, fieldValue);
    }

    private static final OfInt fired_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fired_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t fired_count
     * }
     */
    public static final OfInt fired_count$layout() {
        return fired_count$LAYOUT;
    }

    private static final long fired_count$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t fired_count
     * }
     */
    public static final long fired_count$offset() {
        return fired_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t fired_count
     * }
     */
    public static int fired_count(MemorySegment struct) {
        return struct.get(fired_count$LAYOUT, fired_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t fired_count
     * }
     */
    public static void fired_count(MemorySegment struct, int fieldValue) {
        struct.set(fired_count$LAYOUT, fired_count$OFFSET, fieldValue);
    }

    private static final OfBoolean active$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("active"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool active
     * }
     */
    public static final OfBoolean active$layout() {
        return active$LAYOUT;
    }

    private static final long active$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool active
     * }
     */
    public static final long active$offset() {
        return active$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool active
     * }
     */
    public static boolean active(MemorySegment struct) {
        return struct.get(active$LAYOUT, active$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool active
     * }
     */
    public static void active(MemorySegment struct, boolean fieldValue) {
        struct.set(active$LAYOUT, active$OFFSET, fieldValue);
    }

    private static final OfBoolean single_shot$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("single_shot"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool single_shot
     * }
     */
    public static final OfBoolean single_shot$layout() {
        return single_shot$LAYOUT;
    }

    private static final long single_shot$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool single_shot
     * }
     */
    public static final long single_shot$offset() {
        return single_shot$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool single_shot
     * }
     */
    public static boolean single_shot(MemorySegment struct) {
        return struct.get(single_shot$LAYOUT, single_shot$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool single_shot
     * }
     */
    public static void single_shot(MemorySegment struct, boolean fieldValue) {
        struct.set(single_shot$LAYOUT, single_shot$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

