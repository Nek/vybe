// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_iter_to_json_desc_t {
 *     bool serialize_term_ids;
 *     bool serialize_term_labels;
 *     bool serialize_ids;
 *     bool serialize_id_labels;
 *     bool serialize_sources;
 *     bool serialize_variables;
 *     bool serialize_is_set;
 *     bool serialize_values;
 *     bool serialize_private;
 *     bool serialize_entities;
 *     bool serialize_entity_labels;
 *     bool serialize_entity_ids;
 *     bool serialize_entity_names;
 *     bool serialize_variable_labels;
 *     bool serialize_variable_ids;
 *     bool serialize_colors;
 *     bool measure_eval_duration;
 *     bool serialize_type_info;
 *     bool serialize_table;
 *     bool serialize_rows;
 *     bool serialize_field_info;
 *     bool serialize_query_info;
 *     bool serialize_query_plan;
 *     bool serialize_query_profile;
 *     bool dont_serialize_results;
 *     flecs_poly_t *query;
 * }
 * }
 */
public class ecs_iter_to_json_desc_t {

    ecs_iter_to_json_desc_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_BOOL.withName("serialize_term_ids"),
        flecs.C_BOOL.withName("serialize_term_labels"),
        flecs.C_BOOL.withName("serialize_ids"),
        flecs.C_BOOL.withName("serialize_id_labels"),
        flecs.C_BOOL.withName("serialize_sources"),
        flecs.C_BOOL.withName("serialize_variables"),
        flecs.C_BOOL.withName("serialize_is_set"),
        flecs.C_BOOL.withName("serialize_values"),
        flecs.C_BOOL.withName("serialize_private"),
        flecs.C_BOOL.withName("serialize_entities"),
        flecs.C_BOOL.withName("serialize_entity_labels"),
        flecs.C_BOOL.withName("serialize_entity_ids"),
        flecs.C_BOOL.withName("serialize_entity_names"),
        flecs.C_BOOL.withName("serialize_variable_labels"),
        flecs.C_BOOL.withName("serialize_variable_ids"),
        flecs.C_BOOL.withName("serialize_colors"),
        flecs.C_BOOL.withName("measure_eval_duration"),
        flecs.C_BOOL.withName("serialize_type_info"),
        flecs.C_BOOL.withName("serialize_table"),
        flecs.C_BOOL.withName("serialize_rows"),
        flecs.C_BOOL.withName("serialize_field_info"),
        flecs.C_BOOL.withName("serialize_query_info"),
        flecs.C_BOOL.withName("serialize_query_plan"),
        flecs.C_BOOL.withName("serialize_query_profile"),
        flecs.C_BOOL.withName("dont_serialize_results"),
        MemoryLayout.paddingLayout(7),
        flecs.C_POINTER.withName("query")
    ).withName("ecs_iter_to_json_desc_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean serialize_term_ids$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_term_ids"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_term_ids
     * }
     */
    public static final OfBoolean serialize_term_ids$layout() {
        return serialize_term_ids$LAYOUT;
    }

    private static final long serialize_term_ids$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_term_ids
     * }
     */
    public static final long serialize_term_ids$offset() {
        return serialize_term_ids$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_term_ids
     * }
     */
    public static boolean serialize_term_ids(MemorySegment struct) {
        return struct.get(serialize_term_ids$LAYOUT, serialize_term_ids$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_term_ids
     * }
     */
    public static void serialize_term_ids(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_term_ids$LAYOUT, serialize_term_ids$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_term_labels$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_term_labels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_term_labels
     * }
     */
    public static final OfBoolean serialize_term_labels$layout() {
        return serialize_term_labels$LAYOUT;
    }

    private static final long serialize_term_labels$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_term_labels
     * }
     */
    public static final long serialize_term_labels$offset() {
        return serialize_term_labels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_term_labels
     * }
     */
    public static boolean serialize_term_labels(MemorySegment struct) {
        return struct.get(serialize_term_labels$LAYOUT, serialize_term_labels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_term_labels
     * }
     */
    public static void serialize_term_labels(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_term_labels$LAYOUT, serialize_term_labels$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_ids$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_ids"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_ids
     * }
     */
    public static final OfBoolean serialize_ids$layout() {
        return serialize_ids$LAYOUT;
    }

    private static final long serialize_ids$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_ids
     * }
     */
    public static final long serialize_ids$offset() {
        return serialize_ids$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_ids
     * }
     */
    public static boolean serialize_ids(MemorySegment struct) {
        return struct.get(serialize_ids$LAYOUT, serialize_ids$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_ids
     * }
     */
    public static void serialize_ids(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_ids$LAYOUT, serialize_ids$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_id_labels$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_id_labels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_id_labels
     * }
     */
    public static final OfBoolean serialize_id_labels$layout() {
        return serialize_id_labels$LAYOUT;
    }

    private static final long serialize_id_labels$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_id_labels
     * }
     */
    public static final long serialize_id_labels$offset() {
        return serialize_id_labels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_id_labels
     * }
     */
    public static boolean serialize_id_labels(MemorySegment struct) {
        return struct.get(serialize_id_labels$LAYOUT, serialize_id_labels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_id_labels
     * }
     */
    public static void serialize_id_labels(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_id_labels$LAYOUT, serialize_id_labels$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_sources$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_sources"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_sources
     * }
     */
    public static final OfBoolean serialize_sources$layout() {
        return serialize_sources$LAYOUT;
    }

    private static final long serialize_sources$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_sources
     * }
     */
    public static final long serialize_sources$offset() {
        return serialize_sources$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_sources
     * }
     */
    public static boolean serialize_sources(MemorySegment struct) {
        return struct.get(serialize_sources$LAYOUT, serialize_sources$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_sources
     * }
     */
    public static void serialize_sources(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_sources$LAYOUT, serialize_sources$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_variables$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_variables"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_variables
     * }
     */
    public static final OfBoolean serialize_variables$layout() {
        return serialize_variables$LAYOUT;
    }

    private static final long serialize_variables$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_variables
     * }
     */
    public static final long serialize_variables$offset() {
        return serialize_variables$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_variables
     * }
     */
    public static boolean serialize_variables(MemorySegment struct) {
        return struct.get(serialize_variables$LAYOUT, serialize_variables$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_variables
     * }
     */
    public static void serialize_variables(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_variables$LAYOUT, serialize_variables$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_is_set$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_is_set"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_is_set
     * }
     */
    public static final OfBoolean serialize_is_set$layout() {
        return serialize_is_set$LAYOUT;
    }

    private static final long serialize_is_set$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_is_set
     * }
     */
    public static final long serialize_is_set$offset() {
        return serialize_is_set$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_is_set
     * }
     */
    public static boolean serialize_is_set(MemorySegment struct) {
        return struct.get(serialize_is_set$LAYOUT, serialize_is_set$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_is_set
     * }
     */
    public static void serialize_is_set(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_is_set$LAYOUT, serialize_is_set$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_values$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_values"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_values
     * }
     */
    public static final OfBoolean serialize_values$layout() {
        return serialize_values$LAYOUT;
    }

    private static final long serialize_values$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_values
     * }
     */
    public static final long serialize_values$offset() {
        return serialize_values$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_values
     * }
     */
    public static boolean serialize_values(MemorySegment struct) {
        return struct.get(serialize_values$LAYOUT, serialize_values$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_values
     * }
     */
    public static void serialize_values(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_values$LAYOUT, serialize_values$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_private$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_private"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_private
     * }
     */
    public static final OfBoolean serialize_private$layout() {
        return serialize_private$LAYOUT;
    }

    private static final long serialize_private$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_private
     * }
     */
    public static final long serialize_private$offset() {
        return serialize_private$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_private
     * }
     */
    public static boolean serialize_private(MemorySegment struct) {
        return struct.get(serialize_private$LAYOUT, serialize_private$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_private
     * }
     */
    public static void serialize_private(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_private$LAYOUT, serialize_private$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_entities$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_entities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_entities
     * }
     */
    public static final OfBoolean serialize_entities$layout() {
        return serialize_entities$LAYOUT;
    }

    private static final long serialize_entities$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_entities
     * }
     */
    public static final long serialize_entities$offset() {
        return serialize_entities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_entities
     * }
     */
    public static boolean serialize_entities(MemorySegment struct) {
        return struct.get(serialize_entities$LAYOUT, serialize_entities$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_entities
     * }
     */
    public static void serialize_entities(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_entities$LAYOUT, serialize_entities$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_entity_labels$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_entity_labels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_entity_labels
     * }
     */
    public static final OfBoolean serialize_entity_labels$layout() {
        return serialize_entity_labels$LAYOUT;
    }

    private static final long serialize_entity_labels$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_entity_labels
     * }
     */
    public static final long serialize_entity_labels$offset() {
        return serialize_entity_labels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_entity_labels
     * }
     */
    public static boolean serialize_entity_labels(MemorySegment struct) {
        return struct.get(serialize_entity_labels$LAYOUT, serialize_entity_labels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_entity_labels
     * }
     */
    public static void serialize_entity_labels(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_entity_labels$LAYOUT, serialize_entity_labels$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_entity_ids$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_entity_ids"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_entity_ids
     * }
     */
    public static final OfBoolean serialize_entity_ids$layout() {
        return serialize_entity_ids$LAYOUT;
    }

    private static final long serialize_entity_ids$OFFSET = 11;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_entity_ids
     * }
     */
    public static final long serialize_entity_ids$offset() {
        return serialize_entity_ids$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_entity_ids
     * }
     */
    public static boolean serialize_entity_ids(MemorySegment struct) {
        return struct.get(serialize_entity_ids$LAYOUT, serialize_entity_ids$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_entity_ids
     * }
     */
    public static void serialize_entity_ids(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_entity_ids$LAYOUT, serialize_entity_ids$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_entity_names$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_entity_names"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_entity_names
     * }
     */
    public static final OfBoolean serialize_entity_names$layout() {
        return serialize_entity_names$LAYOUT;
    }

    private static final long serialize_entity_names$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_entity_names
     * }
     */
    public static final long serialize_entity_names$offset() {
        return serialize_entity_names$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_entity_names
     * }
     */
    public static boolean serialize_entity_names(MemorySegment struct) {
        return struct.get(serialize_entity_names$LAYOUT, serialize_entity_names$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_entity_names
     * }
     */
    public static void serialize_entity_names(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_entity_names$LAYOUT, serialize_entity_names$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_variable_labels$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_variable_labels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_variable_labels
     * }
     */
    public static final OfBoolean serialize_variable_labels$layout() {
        return serialize_variable_labels$LAYOUT;
    }

    private static final long serialize_variable_labels$OFFSET = 13;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_variable_labels
     * }
     */
    public static final long serialize_variable_labels$offset() {
        return serialize_variable_labels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_variable_labels
     * }
     */
    public static boolean serialize_variable_labels(MemorySegment struct) {
        return struct.get(serialize_variable_labels$LAYOUT, serialize_variable_labels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_variable_labels
     * }
     */
    public static void serialize_variable_labels(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_variable_labels$LAYOUT, serialize_variable_labels$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_variable_ids$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_variable_ids"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_variable_ids
     * }
     */
    public static final OfBoolean serialize_variable_ids$layout() {
        return serialize_variable_ids$LAYOUT;
    }

    private static final long serialize_variable_ids$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_variable_ids
     * }
     */
    public static final long serialize_variable_ids$offset() {
        return serialize_variable_ids$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_variable_ids
     * }
     */
    public static boolean serialize_variable_ids(MemorySegment struct) {
        return struct.get(serialize_variable_ids$LAYOUT, serialize_variable_ids$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_variable_ids
     * }
     */
    public static void serialize_variable_ids(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_variable_ids$LAYOUT, serialize_variable_ids$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_colors$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_colors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_colors
     * }
     */
    public static final OfBoolean serialize_colors$layout() {
        return serialize_colors$LAYOUT;
    }

    private static final long serialize_colors$OFFSET = 15;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_colors
     * }
     */
    public static final long serialize_colors$offset() {
        return serialize_colors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_colors
     * }
     */
    public static boolean serialize_colors(MemorySegment struct) {
        return struct.get(serialize_colors$LAYOUT, serialize_colors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_colors
     * }
     */
    public static void serialize_colors(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_colors$LAYOUT, serialize_colors$OFFSET, fieldValue);
    }

    private static final OfBoolean measure_eval_duration$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("measure_eval_duration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool measure_eval_duration
     * }
     */
    public static final OfBoolean measure_eval_duration$layout() {
        return measure_eval_duration$LAYOUT;
    }

    private static final long measure_eval_duration$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool measure_eval_duration
     * }
     */
    public static final long measure_eval_duration$offset() {
        return measure_eval_duration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool measure_eval_duration
     * }
     */
    public static boolean measure_eval_duration(MemorySegment struct) {
        return struct.get(measure_eval_duration$LAYOUT, measure_eval_duration$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool measure_eval_duration
     * }
     */
    public static void measure_eval_duration(MemorySegment struct, boolean fieldValue) {
        struct.set(measure_eval_duration$LAYOUT, measure_eval_duration$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_type_info$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_type_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_type_info
     * }
     */
    public static final OfBoolean serialize_type_info$layout() {
        return serialize_type_info$LAYOUT;
    }

    private static final long serialize_type_info$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_type_info
     * }
     */
    public static final long serialize_type_info$offset() {
        return serialize_type_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_type_info
     * }
     */
    public static boolean serialize_type_info(MemorySegment struct) {
        return struct.get(serialize_type_info$LAYOUT, serialize_type_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_type_info
     * }
     */
    public static void serialize_type_info(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_type_info$LAYOUT, serialize_type_info$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_table$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_table
     * }
     */
    public static final OfBoolean serialize_table$layout() {
        return serialize_table$LAYOUT;
    }

    private static final long serialize_table$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_table
     * }
     */
    public static final long serialize_table$offset() {
        return serialize_table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_table
     * }
     */
    public static boolean serialize_table(MemorySegment struct) {
        return struct.get(serialize_table$LAYOUT, serialize_table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_table
     * }
     */
    public static void serialize_table(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_table$LAYOUT, serialize_table$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_rows$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_rows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_rows
     * }
     */
    public static final OfBoolean serialize_rows$layout() {
        return serialize_rows$LAYOUT;
    }

    private static final long serialize_rows$OFFSET = 19;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_rows
     * }
     */
    public static final long serialize_rows$offset() {
        return serialize_rows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_rows
     * }
     */
    public static boolean serialize_rows(MemorySegment struct) {
        return struct.get(serialize_rows$LAYOUT, serialize_rows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_rows
     * }
     */
    public static void serialize_rows(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_rows$LAYOUT, serialize_rows$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_field_info$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_field_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_field_info
     * }
     */
    public static final OfBoolean serialize_field_info$layout() {
        return serialize_field_info$LAYOUT;
    }

    private static final long serialize_field_info$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_field_info
     * }
     */
    public static final long serialize_field_info$offset() {
        return serialize_field_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_field_info
     * }
     */
    public static boolean serialize_field_info(MemorySegment struct) {
        return struct.get(serialize_field_info$LAYOUT, serialize_field_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_field_info
     * }
     */
    public static void serialize_field_info(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_field_info$LAYOUT, serialize_field_info$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_query_info$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_query_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_query_info
     * }
     */
    public static final OfBoolean serialize_query_info$layout() {
        return serialize_query_info$LAYOUT;
    }

    private static final long serialize_query_info$OFFSET = 21;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_query_info
     * }
     */
    public static final long serialize_query_info$offset() {
        return serialize_query_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_query_info
     * }
     */
    public static boolean serialize_query_info(MemorySegment struct) {
        return struct.get(serialize_query_info$LAYOUT, serialize_query_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_query_info
     * }
     */
    public static void serialize_query_info(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_query_info$LAYOUT, serialize_query_info$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_query_plan$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_query_plan"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_query_plan
     * }
     */
    public static final OfBoolean serialize_query_plan$layout() {
        return serialize_query_plan$LAYOUT;
    }

    private static final long serialize_query_plan$OFFSET = 22;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_query_plan
     * }
     */
    public static final long serialize_query_plan$offset() {
        return serialize_query_plan$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_query_plan
     * }
     */
    public static boolean serialize_query_plan(MemorySegment struct) {
        return struct.get(serialize_query_plan$LAYOUT, serialize_query_plan$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_query_plan
     * }
     */
    public static void serialize_query_plan(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_query_plan$LAYOUT, serialize_query_plan$OFFSET, fieldValue);
    }

    private static final OfBoolean serialize_query_profile$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("serialize_query_profile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool serialize_query_profile
     * }
     */
    public static final OfBoolean serialize_query_profile$layout() {
        return serialize_query_profile$LAYOUT;
    }

    private static final long serialize_query_profile$OFFSET = 23;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool serialize_query_profile
     * }
     */
    public static final long serialize_query_profile$offset() {
        return serialize_query_profile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool serialize_query_profile
     * }
     */
    public static boolean serialize_query_profile(MemorySegment struct) {
        return struct.get(serialize_query_profile$LAYOUT, serialize_query_profile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool serialize_query_profile
     * }
     */
    public static void serialize_query_profile(MemorySegment struct, boolean fieldValue) {
        struct.set(serialize_query_profile$LAYOUT, serialize_query_profile$OFFSET, fieldValue);
    }

    private static final OfBoolean dont_serialize_results$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("dont_serialize_results"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool dont_serialize_results
     * }
     */
    public static final OfBoolean dont_serialize_results$layout() {
        return dont_serialize_results$LAYOUT;
    }

    private static final long dont_serialize_results$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool dont_serialize_results
     * }
     */
    public static final long dont_serialize_results$offset() {
        return dont_serialize_results$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool dont_serialize_results
     * }
     */
    public static boolean dont_serialize_results(MemorySegment struct) {
        return struct.get(dont_serialize_results$LAYOUT, dont_serialize_results$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool dont_serialize_results
     * }
     */
    public static void dont_serialize_results(MemorySegment struct, boolean fieldValue) {
        struct.set(dont_serialize_results$LAYOUT, dont_serialize_results$OFFSET, fieldValue);
    }

    private static final AddressLayout query$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("query"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * flecs_poly_t *query
     * }
     */
    public static final AddressLayout query$layout() {
        return query$LAYOUT;
    }

    private static final long query$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * flecs_poly_t *query
     * }
     */
    public static final long query$offset() {
        return query$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * flecs_poly_t *query
     * }
     */
    public static MemorySegment query(MemorySegment struct) {
        return struct.get(query$LAYOUT, query$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * flecs_poly_t *query
     * }
     */
    public static void query(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(query$LAYOUT, query$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

