// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_query_stats_t {
 *     int64_t first_;
 *     ecs_metric_t result_count;
 *     ecs_metric_t matched_table_count;
 *     ecs_metric_t matched_empty_table_count;
 *     ecs_metric_t matched_entity_count;
 *     ecs_metric_t eval_count;
 *     int64_t last_;
 *     int32_t t;
 * }
 * }
 */
public class ecs_query_stats_t {

    ecs_query_stats_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_LONG_LONG.withName("first_"),
        ecs_metric_t.layout().withName("result_count"),
        ecs_metric_t.layout().withName("matched_table_count"),
        ecs_metric_t.layout().withName("matched_empty_table_count"),
        ecs_metric_t.layout().withName("matched_entity_count"),
        ecs_metric_t.layout().withName("eval_count"),
        flecs.C_LONG_LONG.withName("last_"),
        flecs.C_INT.withName("t"),
        MemoryLayout.paddingLayout(4)
    ).withName("ecs_query_stats_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong first_$LAYOUT = (OfLong)$LAYOUT.select(groupElement("first_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t first_
     * }
     */
    public static final OfLong first_$layout() {
        return first_$LAYOUT;
    }

    private static final long first_$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t first_
     * }
     */
    public static final long first_$offset() {
        return first_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t first_
     * }
     */
    public static long first_(MemorySegment struct) {
        return struct.get(first_$LAYOUT, first_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t first_
     * }
     */
    public static void first_(MemorySegment struct, long fieldValue) {
        struct.set(first_$LAYOUT, first_$OFFSET, fieldValue);
    }

    private static final GroupLayout result_count$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("result_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_metric_t result_count
     * }
     */
    public static final GroupLayout result_count$layout() {
        return result_count$LAYOUT;
    }

    private static final long result_count$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_metric_t result_count
     * }
     */
    public static final long result_count$offset() {
        return result_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_metric_t result_count
     * }
     */
    public static MemorySegment result_count(MemorySegment struct) {
        return struct.asSlice(result_count$OFFSET, result_count$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_metric_t result_count
     * }
     */
    public static void result_count(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, result_count$OFFSET, result_count$LAYOUT.byteSize());
    }

    private static final GroupLayout matched_table_count$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("matched_table_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_metric_t matched_table_count
     * }
     */
    public static final GroupLayout matched_table_count$layout() {
        return matched_table_count$LAYOUT;
    }

    private static final long matched_table_count$OFFSET = 1208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_metric_t matched_table_count
     * }
     */
    public static final long matched_table_count$offset() {
        return matched_table_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_metric_t matched_table_count
     * }
     */
    public static MemorySegment matched_table_count(MemorySegment struct) {
        return struct.asSlice(matched_table_count$OFFSET, matched_table_count$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_metric_t matched_table_count
     * }
     */
    public static void matched_table_count(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, matched_table_count$OFFSET, matched_table_count$LAYOUT.byteSize());
    }

    private static final GroupLayout matched_empty_table_count$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("matched_empty_table_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_metric_t matched_empty_table_count
     * }
     */
    public static final GroupLayout matched_empty_table_count$layout() {
        return matched_empty_table_count$LAYOUT;
    }

    private static final long matched_empty_table_count$OFFSET = 2408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_metric_t matched_empty_table_count
     * }
     */
    public static final long matched_empty_table_count$offset() {
        return matched_empty_table_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_metric_t matched_empty_table_count
     * }
     */
    public static MemorySegment matched_empty_table_count(MemorySegment struct) {
        return struct.asSlice(matched_empty_table_count$OFFSET, matched_empty_table_count$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_metric_t matched_empty_table_count
     * }
     */
    public static void matched_empty_table_count(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, matched_empty_table_count$OFFSET, matched_empty_table_count$LAYOUT.byteSize());
    }

    private static final GroupLayout matched_entity_count$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("matched_entity_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_metric_t matched_entity_count
     * }
     */
    public static final GroupLayout matched_entity_count$layout() {
        return matched_entity_count$LAYOUT;
    }

    private static final long matched_entity_count$OFFSET = 3608;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_metric_t matched_entity_count
     * }
     */
    public static final long matched_entity_count$offset() {
        return matched_entity_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_metric_t matched_entity_count
     * }
     */
    public static MemorySegment matched_entity_count(MemorySegment struct) {
        return struct.asSlice(matched_entity_count$OFFSET, matched_entity_count$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_metric_t matched_entity_count
     * }
     */
    public static void matched_entity_count(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, matched_entity_count$OFFSET, matched_entity_count$LAYOUT.byteSize());
    }

    private static final GroupLayout eval_count$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("eval_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_metric_t eval_count
     * }
     */
    public static final GroupLayout eval_count$layout() {
        return eval_count$LAYOUT;
    }

    private static final long eval_count$OFFSET = 4808;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_metric_t eval_count
     * }
     */
    public static final long eval_count$offset() {
        return eval_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_metric_t eval_count
     * }
     */
    public static MemorySegment eval_count(MemorySegment struct) {
        return struct.asSlice(eval_count$OFFSET, eval_count$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_metric_t eval_count
     * }
     */
    public static void eval_count(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, eval_count$OFFSET, eval_count$LAYOUT.byteSize());
    }

    private static final OfLong last_$LAYOUT = (OfLong)$LAYOUT.select(groupElement("last_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t last_
     * }
     */
    public static final OfLong last_$layout() {
        return last_$LAYOUT;
    }

    private static final long last_$OFFSET = 6008;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t last_
     * }
     */
    public static final long last_$offset() {
        return last_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t last_
     * }
     */
    public static long last_(MemorySegment struct) {
        return struct.get(last_$LAYOUT, last_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t last_
     * }
     */
    public static void last_(MemorySegment struct, long fieldValue) {
        struct.set(last_$LAYOUT, last_$OFFSET, fieldValue);
    }

    private static final OfInt t$LAYOUT = (OfInt)$LAYOUT.select(groupElement("t"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t t
     * }
     */
    public static final OfInt t$layout() {
        return t$LAYOUT;
    }

    private static final long t$OFFSET = 6016;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t t
     * }
     */
    public static final long t$offset() {
        return t$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t t
     * }
     */
    public static int t(MemorySegment struct) {
        return struct.get(t$LAYOUT, t$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t t
     * }
     */
    public static void t(MemorySegment struct, int fieldValue) {
        struct.set(t$LAYOUT, t$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

