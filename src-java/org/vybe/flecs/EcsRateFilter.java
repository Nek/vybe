// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct EcsRateFilter {
 *     ecs_entity_t src;
 *     int32_t rate;
 *     int32_t tick_count;
 *     float time_elapsed;
 * }
 * }
 */
public class EcsRateFilter {

    EcsRateFilter() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_LONG_LONG.withName("src"),
        flecs.C_INT.withName("rate"),
        flecs.C_INT.withName("tick_count"),
        flecs.C_FLOAT.withName("time_elapsed"),
        MemoryLayout.paddingLayout(4)
    ).withName("EcsRateFilter");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong src$LAYOUT = (OfLong)$LAYOUT.select(groupElement("src"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t src
     * }
     */
    public static final OfLong src$layout() {
        return src$LAYOUT;
    }

    private static final long src$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t src
     * }
     */
    public static final long src$offset() {
        return src$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t src
     * }
     */
    public static long src(MemorySegment struct) {
        return struct.get(src$LAYOUT, src$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t src
     * }
     */
    public static void src(MemorySegment struct, long fieldValue) {
        struct.set(src$LAYOUT, src$OFFSET, fieldValue);
    }

    private static final OfInt rate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t rate
     * }
     */
    public static final OfInt rate$layout() {
        return rate$LAYOUT;
    }

    private static final long rate$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t rate
     * }
     */
    public static final long rate$offset() {
        return rate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t rate
     * }
     */
    public static int rate(MemorySegment struct) {
        return struct.get(rate$LAYOUT, rate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t rate
     * }
     */
    public static void rate(MemorySegment struct, int fieldValue) {
        struct.set(rate$LAYOUT, rate$OFFSET, fieldValue);
    }

    private static final OfInt tick_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tick_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t tick_count
     * }
     */
    public static final OfInt tick_count$layout() {
        return tick_count$LAYOUT;
    }

    private static final long tick_count$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t tick_count
     * }
     */
    public static final long tick_count$offset() {
        return tick_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t tick_count
     * }
     */
    public static int tick_count(MemorySegment struct) {
        return struct.get(tick_count$LAYOUT, tick_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t tick_count
     * }
     */
    public static void tick_count(MemorySegment struct, int fieldValue) {
        struct.set(tick_count$LAYOUT, tick_count$OFFSET, fieldValue);
    }

    private static final OfFloat time_elapsed$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("time_elapsed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float time_elapsed
     * }
     */
    public static final OfFloat time_elapsed$layout() {
        return time_elapsed$LAYOUT;
    }

    private static final long time_elapsed$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float time_elapsed
     * }
     */
    public static final long time_elapsed$offset() {
        return time_elapsed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float time_elapsed
     * }
     */
    public static float time_elapsed(MemorySegment struct) {
        return struct.get(time_elapsed$LAYOUT, time_elapsed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float time_elapsed
     * }
     */
    public static void time_elapsed(MemorySegment struct, float fieldValue) {
        struct.set(time_elapsed$LAYOUT, time_elapsed$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

